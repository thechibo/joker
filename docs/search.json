[{"path":"https://thechibo.github.io/joker/articles/joker.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"An Introduction to joker","text":"Package joker designed cover broad collection distribution families, extending functionalities stats package support new families, parametric quantity computation parameter estimation. package features available stats-like syntax entry-level users, S4 object-oriented programming system experienced ones.","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/articles/joker.html","id":"probability-distributions","dir":"Articles","previous_headings":"The joker S4 Distribution System","what":"Probability Distributions","title":"An Introduction to joker","text":"joker OOP system, distribution respective S4 class. following table shows distributions available package, along class names. subclasses Distribution S4 class. Overview distributions implemented joker package, along respective class names. Defining object desired distribution class straightforward, seen following example. parameter names, generally identical ones defined stats package, can omitted. defined distribution object D, d()-p()-q()-r() functions can used, shown following example, comparing stats syntax. Alternatively, distribution argument supplied, methods behave functionals (.e. return function). behavior offers enhanced functionality : Technical Detail: quantile function called qn() rather intuitive q(). reason behind choice lies RStudio IDE (Integrated Development Environment), overrides method selection process base function q() used quit R session, .e. function named q() always ends session. order avoid unpleasant behavior, name qn() chosen instead.","code":"library(knitr)  kable(   data.frame(     Distribution = c(\"Bernoulli\", \"Beta\", \"Binomial\", \"Categorical\", \"Cauchy\",                      \"Chi-Square\", \"Dirichlet\", \"Fisher\", \"Gamma\", \"Geometric\"),     Class_Name = c(\"Bern\", \"Beta\", \"Binom\", \"Cat\", \"Cauchy\", \"Chisq\", \"Dir\",                    \"Fisher\", \"Gam\", \"Geom\"),     Distribution2 = c(\"Laplace\", \"Log-Normal\", \"Multivariate Gamma\",                       \"Multinomial\", \"Negative Binomial\", \"Normal\", \"Poisson\",                       \"Student\", \"Uniform\", \"Weibull\"),     Class_Name2 = c(\"Laplace\", \"Lnorm\", \"Multigam\", \"Multinom\", \"Nbinom\",                     \"Norm\", \"Pois\", \"Stud\", \"Unif\", \"Weib\")   ),   col.names = c(\"Distribution\", \"Class Name\", \"Distribution\", \"Class Name\"),   caption = \"Overview of the distributions implemented in the `joker` package,    along with their respective class names.\" ) shape1 <- 1  shape2 <- 2 D <- Beta(shape1, shape2) d(D, 0.5) > [1] 1 dbeta(0.5, shape1, shape2) > [1] 1  p(D, 0.5) > [1] 0.75 pbeta(0.5, shape1, shape2) > [1] 0.75  qn(D, 0.75) > [1] 0.5 qbeta(0.75, shape1, shape2) > [1] 0.5  r(D, 2) > [1] 0.2494058 0.3353119 rbeta(2, shape1, shape2) > [1] 0.15414668 0.06689389 F1 <- p(D) F1(0.5) > [1] 0.75"},{"path":"https://thechibo.github.io/joker/articles/joker.html","id":"parametric-quantities-of-interest","dir":"Articles","previous_headings":"The joker S4 Distribution System","what":"Parametric Quantities of Interest","title":"An Introduction to joker","text":"joker package contains set methods calculate theoretical moments (expectation, variance standard deviation, skewness, excess kurtosis) important parametric functions (median, mode, entropy, Fisher information) distribution. Alternatively, moments() function automatically finds available methods given distribution returns results list. Technical Detail: function-distribution combinations theoretically defined available; example, var() available distributions, sd() available univariate ones. case result unique, predetermined value returned warning. following example illustrates case ℬ(1,1)\\mathcal{B}(1, 1), .e. uniform distribution every value [0,1][0, 1] interval mode.","code":"mean(D) > [1] 0.3333333 median(D) > [1] 0.2928932 mode(D) > [1] 0 var(D) > [1] 0.05555556 sd(D) > [1] 0.2357023 skew(D) > [1] 0.5656854 kurt(D) > [1] 0.2333333 entro(D) > [1] -0.1931472 finf(D) >            shape1     shape2 > shape1  1.2500000 -0.3949341 > shape2 -0.3949341  0.2500000 mode(Beta(1, 1)) > Warning in mode(Beta(1, 1)): In Beta(1, 1), all elements in the [0, 1] interval are modes. 0.5 >             is returned by default. > [1] 0.5"},{"path":"https://thechibo.github.io/joker/articles/joker.html","id":"parameter-estimation","dir":"Articles","previous_headings":"","what":"Parameter Estimation","title":"An Introduction to joker","text":"joker package includes number options comes parameter estimation. order illustrate alternatives, random sample generated Beta distribution.","code":"set.seed(1) shape1 <- 1 shape2 <- 2 D <- Beta(shape1, shape2) x <- r(D, 100)"},{"path":"https://thechibo.github.io/joker/articles/joker.html","id":"estimation-methods","dir":"Articles","previous_headings":"Parameter Estimation","what":"Estimation Methods","title":"An Introduction to joker","text":"package covers three major estimation methods: maximum likelihood estimation (MLE), moment estimation (), score-adjusted moment estimation (). order perform parameter estimation, new e<name>() member added d()-p()-q()-r() family, following standard stats name convention. e<name>() functions take two arguments, observations x (atomic vector univariate matrix multivariate distributions) type estimation method use. general function called e() also implemented, covering distributions estimators. Dominant estimation methods mle(), (), () also available S4 generics. Technical Detail: important note S4 methods also accept character distribution. name S4 distribution generator, case ignored.","code":"ebeta(x, type = \"mle\") > $shape1 > [1] 1.066968 >  > $shape2 > [1] 2.466715 ebeta(x, type = \"me\") > $shape1 > [1] 1.074511 >  > $shape2 > [1] 2.469756 ebeta(x, type = \"same\") > $shape1 > [1] 1.067768 >  > $shape2 > [1] 2.454257 e(D, x, type = \"mle\") > $shape1 > [1] 1.066968 >  > $shape2 > [1] 2.466715 mle(D, x) > $shape1 > [1] 1.066968 >  > $shape2 > [1] 2.466715 me(D, x) > $shape1 > [1] 1.074511 >  > $shape2 > [1] 2.469756 same(D, x) > $shape1 > [1] 1.067768 >  > $shape2 > [1] 2.454257 mle(\"beta\", x) mle(\"bEtA\", x) e(\"Beta\", x, type = \"mle\")"},{"path":"https://thechibo.github.io/joker/articles/joker.html","id":"log-likelihood","dir":"Articles","previous_headings":"Parameter Estimation","what":"Log-likelihood","title":"An Introduction to joker","text":"Likewise, log-likelihood functions available two versions, distribution specific one, e.g. llbeta(), ll() S4 generic one. distribution families like beta gamma, MLE explicitly derived numerical optimization algorithms employed. Even good scenarios, plenty observations smooth optimization function, numerical algorithms viewed panacea, extra care taken ensure fast right convergence possible. Two important steps taken joker direction: illustrative example Beta distribution shown . Let ff denote probability density function X∼ℬ(α,β)X\\sim\\mathcal{B}(\\alpha,\\beta): f(x;α,β)=Γ(α+β)Γ(α)Γ(β)xα−1(1−x)β−1,0<x<1, f(x; \\alpha, \\beta) = \\frac{\\Gamma(\\alpha + \\beta)}{\\Gamma(\\alpha) \\Gamma(\\beta)}x^{\\alpha-1} (1 - x)^{\\beta-1}, \\quad 0 < x < 1, Γ\\Gamma Gamma function. , log-likelihood function, divided sample size nn, takes form: ℓ(α,β)=(α−1)logX¯+(β−1)log(1−X)¯−logΓ(α)−logΓ(β)+logΓ(α+β). \\ell(\\alpha, \\beta) = (\\alpha - 1) \\overline{\\log X} + (\\beta - 1) \\overline{\\log (1 - X)} - \\log \\Gamma(\\alpha) - \\log \\Gamma(\\beta) + \\log \\Gamma(\\alpha + \\beta). score equation α\\alpha : ∂ℓ∂α(α,β)=logX¯−ψ(α)+ψ(α+β)=0. \\frac{\\partial \\ell}{\\partial \\alpha}(\\alpha, \\beta) = \\overline{\\log X} - \\psi(\\alpha) + \\psi(\\alpha + \\beta) = 0. score equation β\\beta : ∂ℓ∂β(α,β)=log(1−X)¯−ψ(β)+ψ(α+β)=0. \\frac{\\partial \\ell}{\\partial \\beta}(\\alpha, \\beta) = \\overline{\\log (1 - X)} - \\psi(\\beta) + \\psi(\\alpha + \\beta) = 0. two nonlinear equations must solved numerically. However, instead solving two-dimensional problem, one can see denoting c:=α+βc := \\alpha + \\beta, two score equations can rewritten : α=ψ−1[ψ(c)+logX¯]β=ψ−1[ψ(c)+log(1−X)¯],   \\alpha = \\psi^{-1}\\left[\\psi(c) + \\overline{\\log X}\\right] \\quad \\beta = \\psi^{-1}\\left[\\psi(c) + \\overline{\\log (1-X)}\\right], .e. restricted score equation system solution space, parameters can expressed function sum cc, therefore log-likelihood function can optimized respect cc: ℓ⋆(c)=[α(c)−1]logX¯+[β(c)−1]log(1−X)¯−logΓ[α(c)]−logΓ[β(c)]+logΓ(c). \\ell^\\star(c) = \\left[\\alpha(c) - 1\\right] \\overline{\\log X} + \\left[\\beta(c) - 1\\right] \\overline{\\log (1 - X)} - \\log \\Gamma\\left[\\alpha(c)\\right] - \\log \\Gamma\\left[\\beta(c)\\right] + \\log \\Gamma(c). Technical Detail: perhaps intuitive use score equations express α\\alpha function β\\beta vice versa. However, method can directly generalized Dirichlet case reduce initial kk-dimensional problem unidimensional one. technique can utilized gamma multivariate gamma distribution families, also reducing dimension unity, 22 k+1k+1 respectively. joker, resulting function inserted optimization algorithm called lloptim(), confused actual log-likelihood function ll(). corresponding derivative called dlloptim(). Therefore, whenever numerical computation MLE required, joker calls optim() function following arguments: lloptim(), efficient function optimized, dlloptim(), analytically-computed derivate, initialization point (numeric) method use provide one (character, e.g. \"\") optimization algorithm. default, L-BFGS-U used, lower upper limits defined near parameter space boundary.","code":"llbeta(x, shape1, shape2) > [1] 26.56269 ll(D, x) > [1] 26.56269"},{"path":"https://thechibo.github.io/joker/articles/joker.html","id":"asymptotic-variance---covariance-matrix","dir":"Articles","previous_headings":"Parameter Estimation","what":"Asymptotic Variance - Covariance Matrix","title":"An Introduction to joker","text":"asymptotic variance (variance - covariance matrix multidimensional parameters) estimators also covered package v<name>() functions. point estimation, implementation twofold, general function v() covers distributions estimators.","code":"vbeta(shape1, shape2, type = \"mle\") >          shape1   shape2 > shape1 1.597168 2.523104 > shape2 2.523104 7.985838 vbeta(shape1, shape2, type = \"me\") >        shape1 shape2 > shape1    2.1    3.3 > shape2    3.3    9.3 vbeta(shape1, shape2, type = \"same\") >          shape1   shape2 > shape1 1.644934 2.539868 > shape2 2.539868 8.079736 avar(D, type = \"mle\") avar_mle(D) avar_me(D) avar_same(D)"},{"path":"https://thechibo.github.io/joker/articles/joker.html","id":"estimation-metrics-and-comparison","dir":"Articles","previous_headings":"","what":"Estimation Metrics and Comparison","title":"An Introduction to joker","text":"different estimators parameter can compared based finite sample asymptotic properties. package includes two functions named small_metrics() large_metrics() , small large refers small sample large sample terms often used two cases. former estimates bias, variance root mean square error (RMSE) estimator Monte Carlo simulations, latter calculates asymptotic variance - covariance matrix (derived v() functions). resulting data frames can plotted plot() function. illustrate function’s design, consider following example beta distribution: interested calculating metrics (bias, variance, RMSE) α\\alpha parameter estimators (MLE, , ), sample sizes 20 50. Specifically, want illustrate metrics change α∈[1,5]\\alpha\\[1,5], β=2\\beta=2 (constant). following code can : small_metrics() function takes following arguments: D, distribution object interest, prm, list specifies shape1 parameter values change, obs, numeric vector holding sample sizes, est, character vector specifying estimators comparison, sam, Monte Carlo sample size use metrics estimation, seed, seed passed set.seed() replicability. resulting data frame can passed plot() see results. package’s plot() methods depend ggplot2 provide highly-customizable graphs. Small-sample metrics comparison MLE, , beta distribution shape1 parameter. Note distribution families parameter vector, case Dirichlet distribution (multivariate generalization beta), holds single parameter vector alpha. cases, prm list can include third element, pos, specifying parameter vector change: large_metrics() function design almost identical, except obs, sam, seed arguments needed . following example illustrates large sample metrics beta distribution shape α\\alpha estimators. , resulting data frame can passed plot(). Large-sample metrics comparison MLE, , beta distribution shape1 parameter.","code":"D <- Beta(1, 2)  prm <- list(name = \"shape1\",             val = seq(1, 5, by = 0.5))  x <- small_metrics(D, prm,              obs = c(20, 50),              est = c(\"mle\", \"same\", \"me\"),              sam = 1e2,              seed = 1)  head(x@df) >   Parameter Observations Estimator Metric     Value > 1       1.0           20       mle   Bias 0.1390594 > 2       1.5           20       mle   Bias 0.1684557 > 3       2.0           20       mle   Bias 0.2419830 > 4       2.5           20       mle   Bias 0.3105948 > 5       3.0           20       mle   Bias 0.2654124 > 6       3.5           20       mle   Bias 0.4010657 D <- Dir(alpha = 1:4)  prm <- list(name = \"alpha\",             pos = 1,             val = seq(1, 5, by = 0.5))  x <- small_metrics(D, prm,                    obs = c(20, 50),                    est = c(\"mle\", \"same\", \"me\"),                    sam = 1e2,                    seed = 1)  class(x) > [1] \"SmallMetrics\" > attr(,\"package\") > [1] \"joker\" head(x@df) >   Parameter Observations Estimator Metric      Value > 1       1.0           20       mle   Bias 0.04439027 > 2       1.5           20       mle   Bias 0.10076876 > 3       2.0           20       mle   Bias 0.13926634 > 4       2.5           20       mle   Bias 0.20017190 > 5       3.0           20       mle   Bias 0.34101551 > 6       3.5           20       mle   Bias 0.26037083 D <- Beta(1, 2)  prm <- list(name = \"shape1\",             val = seq(1, 5, by = 0.1))  x <- large_metrics(D, prm,                    est = c(\"mle\", \"same\", \"me\"))  class(x) > [1] \"LargeMetrics\" > attr(,\"package\") > [1] \"joker\" head(x@df) >      Row    Col Parameter Estimator    Value > 1 shape1 shape1       1.0       mle 1.597168 > 2 shape2 shape1       1.0       mle 2.523104 > 3 shape1 shape2       1.0       mle 2.523104 > 4 shape2 shape2       1.0       mle 7.985838 > 5 shape1 shape1       1.1       mle 1.969699 > 6 shape2 shape1       1.1       mle 2.826906"},{"path":"https://thechibo.github.io/joker/articles/joker.html","id":"documentation-and-testing","dir":"Articles","previous_headings":"","what":"Documentation and Testing","title":"An Introduction to joker","text":"Comprehensive clear documentation central focus every package. joker, functions extensively documented, providing detailed descriptions arguments, return values, underlying behavior. Examples always included illustrate typical usage edge cases, making easier users quickly understand apply functions workflows. addition function-level documentation, package includes thorough vignette offers broader overview functionality, demonstrates common use cases, provides guidance integrating package larger analysis pipelines, well information expand functionalities. layered approach documentation ensures users levels—new adopters experienced developers—can make full effective use package. joker package places strong emphasis rigorous testing quality assurance. Automated testing implemented using testthat package, comprehensive suite 1,000 individual tests covering core functionality. tests ensure features behave expected, edge cases handled appropriately, regressions quickly detected. Test coverage, measured covr package, exceeds 90%, reflecting thorough approach exercising codebase providing high level confidence package’s reliability. maintain consistent code quality immediate feedback changes, continuous integration (CI) set via GitHub CircleCI. Every pull request push repository triggers full build test cycle, ensuring new contributions meet package’s standards merged. automated workflow helps detect issues early, streamlines collaboration, supports development process prioritizes stability reproducibility. addition automated testing CI, package complies broader community standards best practices. validated using rOpenSci’s pkgcheck package, ensures adherence guidelines documentation, code structure, usability. quality assurance provided autotest, automatically generates tests explore unexpected code behaviors, srr (Statistical Software Review), ensures compliance best practices specific statistical software. Together, tools processes help ensure package remains robust, maintainable, trustworthy users.","code":""},{"path":"https://thechibo.github.io/joker/articles/joker.html","id":"defining-new-classes-and-methods","dir":"Articles","previous_headings":"","what":"Defining New Classes and Methods","title":"An Introduction to joker","text":"course, possible interested distribution family included package. straightforward users define S4 class methods. Since paper addressed novice experienced R users, beta distribution paradigm explained detail :","code":""},{"path":"https://thechibo.github.io/joker/articles/joker.html","id":"defining-the-class","dir":"Articles","previous_headings":"Defining New Classes and Methods","what":"Defining the Class","title":"An Introduction to joker","text":"setClass() function defines new S4 class, .e. distribution interest. slots argument defines parameters respective class (usually numeric, can also matrix distributions like multivariate normal Wishart). optional argument prototype can used define default parameter values case specified user.","code":"setClass(\"Beta\",   contains = \"Distribution\",   slots = c(shape1 = \"numeric\", shape2 = \"numeric\"),   prototype = list(shape1 = 1, shape2 = 1))"},{"path":"https://thechibo.github.io/joker/articles/joker.html","id":"defining-a-generator","dir":"Articles","previous_headings":"Defining New Classes and Methods","what":"Defining a Generator","title":"An Introduction to joker","text":"Now class defined, one can type D <- new(\"Beta\", shape1 = shape1, shape2 = shape2) create new object class Beta. However, intuitive, wrapper function class name can used instead. function, often called generator, can used simply code D <- Beta(1, 2) define new object ℬ(1,2)\\mathcal{B}(1,2) distribution. parameter slots can accessed @ sign, shown .","code":"Beta <- function(shape1 = 1, shape2 = 1) {   new(\"Beta\", shape1 = shape1, shape2 = shape2) }  D <- Beta(1, 2) D@shape1 D@shape2"},{"path":"https://thechibo.github.io/joker/articles/joker.html","id":"defining-validity-checks","dir":"Articles","previous_headings":"Defining New Classes and Methods","what":"Defining Validity Checks","title":"An Introduction to joker","text":"step optional rather essential. far, user type D <- Beta(-1, 2) without errors, even though beta parameters defined ℝ+\\mathbb{R}_{+}. prevent behaviors (probably end bugs road), developer advised create setValidity() function, including necessary restrictions posed parameter space.","code":"setValidity(\"Beta\", function(object) {   if(length(object@shape1) != 1) {     stop(\"shape1 has to be a numeric of length 1\")   }   if(object@shape1 <= 0) {     stop(\"shape1 has to be positive\")   }   if(length(object@shape2) != 1) {     stop(\"shape2 has to be a numeric of length 1\")   }   if(object@shape2 <= 0) {     stop(\"shape2 has to be positive\")   }   TRUE })"},{"path":"https://thechibo.github.io/joker/articles/joker.html","id":"defining-the-class-methods","dir":"Articles","previous_headings":"Defining New Classes and Methods","what":"Defining the Class Methods","title":"An Introduction to joker","text":"Now everything set, time define methods new class. Creating functions S4 methods R two similar processes, except latter wraps function setMethod() specifies signature class, shown . package source code can used easily define methods interest new distribution class.","code":"# probability density function setMethod(\"d\", signature = c(distr = \"Beta\", x = \"numeric\"),           function(distr, x) {             dbeta(x, shape1 = distr@shape1, shape2 = distr@shape2)           })  # (theoretical) expectation setMethod(\"mean\",           signature  = c(x = \"Beta\"),           definition = function(x) {    x@shape1 / (x@shape1 + x@shape2)  })  # moment estimator setMethod(\"me\",           signature  = c(distr = \"Beta\", x = \"numeric\"),           definition = function(distr, x) {    m  <- mean(x)   m2 <- mean(x ^ 2)   d  <- (m - m2) / (m2 - m ^ 2)    c(shape1 = d * m, shape2 = d * (1 - m))  })"},{"path":"https://thechibo.github.io/joker/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ioannis Oikonomidis. Author, maintainer. Samis Trevezas. Author, thesis advisor.","code":""},{"path":"https://thechibo.github.io/joker/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Oikonomidis , Trevezas S (2025). joker: Probability Distributions Parameter Estimation. R package version 0.13.5, https://thechibo.github.io/joker/.","code":"@Manual{,   title = {joker: Probability Distributions and Parameter Estimation},   author = {Ioannis Oikonomidis and Samis Trevezas},   year = {2025},   note = {R package version 0.13.5},   url = {https://thechibo.github.io/joker/}, }"},{"path":[]},{"path":"https://thechibo.github.io/joker/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://thechibo.github.io/joker/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://thechibo.github.io/joker/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://thechibo.github.io/joker/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://thechibo.github.io/joker/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://thechibo.github.io/joker/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://thechibo.github.io/joker/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://thechibo.github.io/joker/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://thechibo.github.io/joker/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://thechibo.github.io/joker/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://thechibo.github.io/joker/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://thechibo.github.io/joker/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to joker","title":"Contributing to joker","text":"Thank interest contributing joker! Whether ’s reporting bug proposing feature, help greatly appreciated.","code":""},{"path":"https://thechibo.github.io/joker/CONTRIBUTING.html","id":"lifecycle-statement","dir":"","previous_headings":"","what":"Lifecycle Statement","title":"Contributing to joker","text":"package initially stable state development, great deal active subsequent development envisioned.","code":""},{"path":"https://thechibo.github.io/joker/CONTRIBUTING.html","id":"reporting-bugs","dir":"","previous_headings":"","what":"Reporting Bugs","title":"Contributing to joker","text":"’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See tidyverse guide create great issue advice.","code":""},{"path":"https://thechibo.github.io/joker/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Reporting Bugs","what":"Code style","title":"Contributing to joker","text":"use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://thechibo.github.io/joker/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to joker","text":"Please note joker project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Probability Distributions and Parameter Estimation","text":"joker R package develops S4 distribution system performs parameter estimation common distribution families, making well-established state---art methods accessible.","code":""},{"path":"https://thechibo.github.io/joker/index.html","id":"key-features","dir":"","previous_headings":"Introduction","what":"Key Features","title":"Probability Distributions and Parameter Estimation","text":"common d, p, q, r function family distribution (e.g. dnorm, pnorm, qnorm, rnorm) enriched ll counterpart (e.g. llnorm) calculates log-likelihood, e counterpart (e.g. enorm) performs parameter estimation, v counterpart (e.g. vnorm) calculates asymptotic variance-covariance matrix estimator. S4-class distribution system developed, allowing generic evaluation dpqr function family basic distribution calculus. Moment functions (mean, median, mode, var, sd, skew, kurt) well functions calculate entropy Fisher Information available distributions. Distributions included base R made available, Dirichlet Multivariate Gamma. Parameter estimation performed analytically instead numerically estimators can expressed explicitly. Numerical optimization MLE (whenever required, e.g. Beta Gamma distributions) performed computational efficiency, taking advantage score equation system reduce dimensionality optimization. 7 Functions compute plot common estimator metrics (bias, variance, RMSE) included package allow convenient study comparison estimators.","code":""},{"path":"https://thechibo.github.io/joker/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Probability Distributions and Parameter Estimation","text":"can install release version joker CRAN running following line code: can install development version joker github running following line code: details can found joker Github repository.","code":"install.packages(\"joker\") devtools::install_github(\"thechibo/joker\")"},{"path":"https://thechibo.github.io/joker/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Probability Distributions and Parameter Estimation","text":"Detailed documentation, along reproducible examples, can found package vignette vignette(topic = \"joker\", package = \"joker\").","code":""},{"path":"https://thechibo.github.io/joker/index.html","id":"team","dir":"","previous_headings":"","what":"Team","title":"Probability Distributions and Parameter Estimation","text":"joker package developed Mathematics Department University Athens. package maintainer Ioannis Oikonomidis, working supervision Prof. Samis Trevezas.","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://thechibo.github.io/joker/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://thechibo.github.io/joker/reference/array_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn an array to a data.frame — array_to_df","title":"Turn an array to a data.frame — array_to_df","text":"function turns array data.frame. used small_metrics() large_metrics() functions.","code":""},{"path":"https://thechibo.github.io/joker/reference/array_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn an array to a data.frame — array_to_df","text":"","code":"array_to_df(x)"},{"path":"https://thechibo.github.io/joker/reference/array_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn an array to a data.frame — array_to_df","text":"x array.","code":""},{"path":"https://thechibo.github.io/joker/reference/array_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn an array to a data.frame — array_to_df","text":"data.frame.","code":""},{"path":"https://thechibo.github.io/joker/reference/array_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn an array to a data.frame — array_to_df","text":"","code":"if (FALSE) { # \\dontrun{ x <- array(1:24, dim = c(2, 3, 4),            dimnames = list(paste0(\"A\", 1:2),                            paste0(\"B\", 1:3),                            paste0(\"C\", 1:4)))  array_to_df(x) } # }"},{"path":"https://thechibo.github.io/joker/reference/Bern.html","id":null,"dir":"Reference","previous_headings":"","what":"Bern Distribution — Bern","title":"Bern Distribution — Bern","text":"Bernoulli distribution discrete probability distribution takes value 1 probability \\(p\\) value 0 probability \\(1 - p\\), \\(0 \\leq p \\leq 1\\).","code":""},{"path":"https://thechibo.github.io/joker/reference/Bern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bern Distribution — Bern","text":"","code":"Bern(prob = 0.5)  dbern(x, prob, log = FALSE)  pbern(q, prob, lower.tail = TRUE, log.p = FALSE)  qbern(p, prob, lower.tail = TRUE, log.p = FALSE)  rbern(n, prob)  # S4 method for class 'Bern,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Bern,numeric' p(distr, q, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Bern,numeric' qn(distr, p, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Bern,numeric' r(distr, n)  # S4 method for class 'Bern' mean(x)  # S4 method for class 'Bern' median(x)  # S4 method for class 'Bern' mode(x)  # S4 method for class 'Bern' var(x)  # S4 method for class 'Bern' sd(x)  # S4 method for class 'Bern' skew(x)  # S4 method for class 'Bern' kurt(x)  # S4 method for class 'Bern' entro(x)  # S4 method for class 'Bern' finf(x)  llbern(x, prob)  # S4 method for class 'Bern,numeric' ll(distr, x)  ebern(x, type = \"mle\", ...)  # S4 method for class 'Bern,numeric' mle(distr, x, na.rm = FALSE)  # S4 method for class 'Bern,numeric' me(distr, x, na.rm = FALSE)  vbern(prob, type = \"mle\")  # S4 method for class 'Bern' avar_mle(distr)  # S4 method for class 'Bern' avar_me(distr)"},{"path":"https://thechibo.github.io/joker/reference/Bern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bern Distribution — Bern","text":"prob numeric. Probability success. x density function, x numeric vector quantiles. moments functions, x object class Bern. log-likelihood estimation functions, x sample observations. log, log.p logical. logarithm probability returned? q numeric. Vector quantiles. lower.tail logical. TRUE (default), probabilities \\(P(X \\leq x)\\), otherwise \\(P(X > x)\\). p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required. distr object class Bern. type character, case ignored. estimator type (mle ). ... extra arguments. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Bern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bern Distribution — Bern","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Bern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bern Distribution — Bern","text":"probability mass function (PMF) Bernoulli distribution given : $$ f(x; p) = p^x (1 - p)^{1 - x}, \\quad p \\(0, 1), \\quad x \\\\{0, 1\\}.$$","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Bern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bern Distribution — Bern","text":"","code":"# ----------------------------------------------------- # Bernoulli Distribution Example # -----------------------------------------------------  # Create the distribution p <- 0.7 D <- Bern(p)  # ------------------ # dpqr Functions # ------------------  d(D, c(0, 1)) # density function #> [1] 0.3 0.7 p(D, c(0, 1)) # distribution function #> [1] 0.3 1.0 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 1 1 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 0.7 0.3 0.7 0.7 0.7 0.7 0.7 0.7 0.3 0.3 0.3 0.7 0.7 0.7 0.7 0.7 0.7 0.7 #>  [19] 0.7 0.3 0.7 0.7 0.3 0.7 0.3 0.3 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 #>  [37] 0.3 0.3 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.3 0.3 0.3 0.3 0.7 0.7 0.7 0.7 0.7 #>  [55] 0.7 0.3 0.7 0.3 0.7 0.7 0.3 0.7 0.7 0.7 0.7 0.7 0.3 0.7 0.7 0.7 0.7 0.7 #>  [73] 0.7 0.7 0.7 0.7 0.7 0.7 0.3 0.7 0.7 0.7 0.7 0.7 0.7 0.3 0.7 0.7 0.7 0.7 #>  [91] 0.3 0.7 0.7 0.3 0.3 0.7 0.7 0.3 0.7 0.7  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 0.7 median(D) # Median #> [1] 1 mode(D) # Mode #> [1] 1 var(D) # Variance #> [1] 0.21 sd(D) # Standard Deviation #> [1] 0.4582576 skew(D) # Skewness #> [1] -0.8728716 kurt(D) # Excess Kurtosis #> [1] -1.238095 entro(D) # Entropy #> [1] 0.6108643 finf(D) # Fisher Information Matrix #> [1] 4.761905  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 0.7  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] -56.00264 llbern(x, p) #> [1] -56.00264  ebern(x, type = \"mle\") #> $prob #> [1] 0.76 #>  ebern(x, type = \"me\") #> $prob #> [1] 0.76 #>   mle(D, x) #> $prob #> [1] 0.76 #>  me(D, x) #> $prob #> [1] 0.76 #>  e(D, x, type = \"mle\") #> $prob #> [1] 0.76 #>   mle(\"bern\", x) # the distr argument can be a character #> $prob #> [1] 0.76 #>   # ------------------ # Estimator Variance # ------------------  vbern(p, type = \"mle\") #> prob  #> 0.21  vbern(p, type = \"me\") #> prob  #> 0.21   avar_mle(D) #> prob  #> 0.21  avar_me(D) #> prob  #> 0.21   v(D, type = \"mle\") #> prob  #> 0.21"},{"path":"https://thechibo.github.io/joker/reference/Beta.html","id":null,"dir":"Reference","previous_headings":"","what":"Beta Distribution — Beta","title":"Beta Distribution — Beta","text":"Beta distribution absolute continuous probability distribution support \\(S = [0,1]\\), parameterized two shape parameters, \\(\\alpha > 0\\) \\(\\beta > 0\\).","code":""},{"path":"https://thechibo.github.io/joker/reference/Beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beta Distribution — Beta","text":"","code":"Beta(shape1 = 1, shape2 = 1)  # S4 method for class 'Beta,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Beta,numeric' p(distr, q, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Beta,numeric' qn(distr, p, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Beta,numeric' r(distr, n)  # S4 method for class 'Beta' mean(x)  # S4 method for class 'Beta' median(x)  # S4 method for class 'Beta' mode(x)  # S4 method for class 'Beta' var(x)  # S4 method for class 'Beta' sd(x)  # S4 method for class 'Beta' skew(x)  # S4 method for class 'Beta' kurt(x)  # S4 method for class 'Beta' entro(x)  # S4 method for class 'Beta' finf(x)  llbeta(x, shape1, shape2)  # S4 method for class 'Beta,numeric' ll(distr, x)  ebeta(x, type = \"mle\", ...)  # S4 method for class 'Beta,numeric' mle(   distr,   x,   par0 = \"same\",   method = \"L-BFGS-B\",   lower = 1e-05,   upper = Inf,   na.rm = FALSE )  # S4 method for class 'Beta,numeric' me(distr, x, na.rm = FALSE)  # S4 method for class 'Beta,numeric' same(distr, x, na.rm = FALSE)  vbeta(shape1, shape2, type = \"mle\")  # S4 method for class 'Beta' avar_mle(distr)  # S4 method for class 'Beta' avar_me(distr)  # S4 method for class 'Beta' avar_same(distr)"},{"path":"https://thechibo.github.io/joker/reference/Beta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beta Distribution — Beta","text":"shape1, shape2 numeric. non-negative distribution parameters. distr object class Beta. x density function, x numeric vector quantiles. moments functions, x object class Beta. log-likelihood estimation functions, x sample observations. log, log.p logical. logarithm probability returned? q numeric. Vector quantiles. lower.tail logical. TRUE (default), probabilities \\(P(X \\leq x)\\), otherwise \\(P(X > x)\\). p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required. type character, case ignored. estimator type (mle, , ). ... extra arguments. par0, method, lower, upper arguments passed optim mle optimization. See Details. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Beta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beta Distribution — Beta","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Beta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Beta Distribution — Beta","text":"probability density function (PDF) Beta distribution given : $$ f(x; \\alpha, \\beta) = \\frac{x^{\\alpha - 1} (1 - x)^{\\beta - 1}}{B(\\alpha, \\beta)}, \\quad \\alpha\\\\mathbb{R}_+, \\, \\beta\\\\mathbb{R}_+,$$ \\(x \\S = [0, 1]\\), \\(B(\\alpha, \\beta)\\) Beta function: $$ B(\\alpha, \\beta) = \\int_0^1 t^{\\alpha - 1} (1 - t)^{\\beta - 1} dt.$$ MLE beta distribution parameters available closed form approximated numerically. done optim(). Specifically, instead solving bivariate optimization problem w.r.t \\((\\alpha, \\beta)\\), optimization can performed parameter sum \\(\\alpha_0:=\\alpha + \\beta \\(0,+\\infty)\\). default method used L-BFGS-B method lower bound 1e-5 upper bound Inf. par0 argument can either numeric (satisfying lower <= par0 <= upper) character specifying closed-form estimator used initialization algorithm (\"\" \"\" - default value).","code":""},{"path":"https://thechibo.github.io/joker/reference/Beta.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Beta Distribution — Beta","text":"Tamae, H., Irie, K. & Kubokawa, T. (2020), score-adjusted approach closed-form estimators gamma beta distributions, Japanese Journal Statistics Data Science 3, 543–561. Papadatos, N. (2022), point estimators gamma beta distributions, arXiv preprint arXiv:2205.10799.","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Beta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beta Distribution — Beta","text":"","code":"# ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  # Create the distribution a <- 3 b <- 5 D <- Beta(a, b)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 0.8, 0.5)) # density function #> [1] 2.268945 0.107520 1.640625 p(D, c(0.3, 0.8, 0.5)) # distribution function #> [1] 0.3529305 0.9953280 0.7734375 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 0.3205858 0.5167578 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 1.24976524 2.30385545 2.30436535 2.24366783 2.23826444 1.71563415 #>   [7] 2.28263219 2.10668839 0.92787399 2.09917742 0.87045906 2.30370469 #>  [13] 1.48498302 1.75732014 2.17337196 1.79839550 2.03897019 0.57529221 #>  [19] 2.08534655 1.75118856 1.63522573 2.29181156 2.14188666 2.28679623 #>  [25] 0.62262194 1.70675168 2.19031209 0.87536478 2.30028329 1.86864335 #>  [31] 2.27587144 1.88068569 0.94438439 0.96563800 2.26940820 1.80165906 #>  [37] 0.25464248 2.28467252 1.12007652 2.27401345 1.98190602 1.65113317 #>  [43] 1.97108943 2.07624080 2.18326721 2.19801819 2.09421572 1.07112503 #>  [49] 2.30443077 1.17180825 2.06449080 2.25139933 1.68945212 0.05499604 #>  [55] 1.87985716 0.79420668 2.07331701 0.93008267 0.07703167 1.84906139 #>  [61] 0.51237483 1.87774483 2.19057215 2.24206926 1.63973348 2.30240492 #>  [67] 2.20344361 2.12521282 1.52874921 1.27431968 2.20775377 1.30479661 #>  [73] 1.79648555 1.84284598 1.90451186 2.29945722 1.19903507 2.21674330 #>  [79] 2.30117732 1.93620566 0.13667862 1.39705135 1.06884493 0.59395349 #>  [85] 1.56541121 1.76378323 1.02060804 0.36888836 1.87454563 2.18034118 #>  [91] 1.54011318 2.18363285 0.95997386 1.53127942 2.23343322 2.28408194 #>  [97] 1.37190707 1.33874755 2.29566516 2.06006047  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 0.375 var(D) # Variance #> [1] 0.02604167 sd(D) # Standard Deviation #> [1] 0.1613743 skew(D) # Skewness #> [1] 0.3098387 kurt(D) # Excess Kurtosis #> [1] 0.04 entro(D) # Entropy #> [1] -0.4301508 finf(D) # Fisher Information Matrix #>            shape1      shape2 #> shape1  0.2617971 -0.13313701 #> shape2 -0.1331370  0.08818594  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 0.375  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] 39.25421 llbeta(x, a, b) #> [1] 39.25421  ebeta(x, type = \"mle\") #> $shape1 #> [1] 3.60909 #>  #> $shape2 #> [1] 4.991035 #>  ebeta(x, type = \"me\") #> $shape1 #> [1] 3.545896 #>  #> $shape2 #> [1] 4.931701 #>  ebeta(x, type = \"same\") #> $shape1 #> [1] 3.584778 #>  #> $shape2 #> [1] 4.985779 #>   mle(D, x) #> $shape1 #> [1] 3.60909 #>  #> $shape2 #> [1] 4.991035 #>  me(D, x) #> $shape1 #> [1] 3.545896 #>  #> $shape2 #> [1] 4.931701 #>  same(D, x) #> $shape1 #> [1] 3.584778 #>  #> $shape2 #> [1] 4.985779 #>  e(D, x, type = \"mle\") #> $shape1 #> [1] 3.60909 #>  #> $shape2 #> [1] 4.991035 #>   mle(\"beta\", x) # the distr argument can be a character #> $shape1 #> [1] 3.60909 #>  #> $shape2 #> [1] 4.991035 #>   # ------------------ # Estimator Variance # ------------------  vbeta(a, b, type = \"mle\") #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 vbeta(a, b, type = \"me\") #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 vbeta(a, b, type = \"same\") #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  avar_mle(D) #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 avar_me(D) #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 avar_same(D) #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  v(D, type = \"mle\") #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039"},{"path":"https://thechibo.github.io/joker/reference/Binom.html","id":null,"dir":"Reference","previous_headings":"","what":"Binom Distribution — Binom","title":"Binom Distribution — Binom","text":"binomial distribution discrete probability distribution models probability x successes n independent Bernoulli trials success probability p.","code":""},{"path":"https://thechibo.github.io/joker/reference/Binom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binom Distribution — Binom","text":"","code":"Binom(size = 1, prob = 0.5)  # S4 method for class 'Binom,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Binom,numeric' p(distr, q, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Binom,numeric' qn(distr, p, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Binom,numeric' r(distr, n)  # S4 method for class 'Binom' mean(x)  # S4 method for class 'Binom' var(x)  # S4 method for class 'Binom' sd(x)  # S4 method for class 'Binom' skew(x)  # S4 method for class 'Binom' kurt(x)  # S4 method for class 'Binom' entro(x)  # S4 method for class 'Binom' finf(x)  llbinom(x, size, prob)  # S4 method for class 'Binom,numeric' ll(distr, x)  ebinom(x, size, type = \"mle\", ...)  # S4 method for class 'Binom,numeric' mle(distr, x, na.rm = FALSE)  # S4 method for class 'Binom,numeric' me(distr, x, na.rm = FALSE)  vbinom(size, prob, type = \"mle\")  # S4 method for class 'Binom' avar_mle(distr)  # S4 method for class 'Binom' avar_me(distr)"},{"path":"https://thechibo.github.io/joker/reference/Binom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binom Distribution — Binom","text":"size number trials (zero ). prob numeric. Probability success trial. distr object class Binom. x density function, x numeric vector quantiles. moments functions, x object class Binom. log-likelihood estimation functions, x sample observations. log, log.p logical. logarithm probability returned? q numeric. Vector quantiles. lower.tail logical. TRUE (default), probabilities \\(P(X \\leq x)\\), otherwise \\(P(X > x)\\). p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required. type character, case ignored. estimator type (mle ). ... extra arguments. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Binom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binom Distribution — Binom","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Binom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Binom Distribution — Binom","text":"probability mass function (PMF) binomial distribution given : $$ f(x; n, p) = \\binom{n}{x} p^x (1 - p)^{n - x}, \\quad N \\\\mathbb{N}, \\quad p \\(0, 1),$$ \\(x \\\\{0, 1, \\dots, N\\}\\).","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Binom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binom Distribution — Binom","text":"","code":"# ----------------------------------------------------- # Binomial Distribution Example # -----------------------------------------------------  # Create the distribution N <- 10 ; p <- 0.7 D <- Binom(N, p)  # ------------------ # dpqr Functions # ------------------  d(D, 0:N) # density function #>  [1] 0.0000059049 0.0001377810 0.0014467005 0.0090016920 0.0367569090 #>  [6] 0.1029193452 0.2001209490 0.2668279320 0.2334744405 0.1210608210 #> [11] 0.0282475249 p(D, 0:N) # distribution function #>  [1] 0.0000059049 0.0001436859 0.0015903864 0.0105920784 0.0473489874 #>  [6] 0.1502683326 0.3503892816 0.6172172136 0.8506916541 0.9717524751 #> [11] 1.0000000000 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 7 8 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 0.121060821 0.200120949 0.233474440 0.028247525 0.121060821 0.200120949 #>   [7] 0.266827932 0.233474440 0.266827932 0.200120949 0.200120949 0.102919345 #>  [13] 0.266827932 0.266827932 0.233474440 0.266827932 0.102919345 0.266827932 #>  [19] 0.200120949 0.266827932 0.200120949 0.266827932 0.102919345 0.200120949 #>  [25] 0.233474440 0.121060821 0.121060821 0.200120949 0.233474440 0.121060821 #>  [31] 0.036756909 0.266827932 0.121060821 0.266827932 0.121060821 0.036756909 #>  [37] 0.121060821 0.233474440 0.102919345 0.036756909 0.200120949 0.102919345 #>  [43] 0.036756909 0.121060821 0.266827932 0.266827932 0.009001692 0.233474440 #>  [49] 0.102919345 0.266827932 0.102919345 0.266827932 0.102919345 0.102919345 #>  [55] 0.233474440 0.028247525 0.233474440 0.102919345 0.233474440 0.102919345 #>  [61] 0.036756909 0.028247525 0.266827932 0.233474440 0.266827932 0.200120949 #>  [67] 0.102919345 0.233474440 0.102919345 0.200120949 0.200120949 0.121060821 #>  [73] 0.233474440 0.200120949 0.102919345 0.233474440 0.266827932 0.266827932 #>  [79] 0.266827932 0.233474440 0.028247525 0.233474440 0.266827932 0.200120949 #>  [85] 0.121060821 0.233474440 0.233474440 0.266827932 0.028247525 0.121060821 #>  [91] 0.009001692 0.102919345 0.121060821 0.121060821 0.233474440 0.266827932 #>  [97] 0.200120949 0.266827932 0.121060821 0.102919345  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 7 var(D) # Variance #> [1] 2.1 sd(D) # Standard Deviation #> [1] 1.449138 skew(D) # Skewness #> [1] -0.2760262 kurt(D) # Excess Kurtosis #> [1] -0.1238095 entro(D) # Entropy #> Warning: The entropy given is an approximation in the O(1 / n) order. #> [1] 2.58229 finf(D) # Fisher Information Matrix #> [1] 47.61905  # List of all available moments mom <- moments(D) #> Warning: The entropy given is an approximation in the O(1 / n) order. mom$mean # expectation #> [1] 7  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] -193.9824 llbinom(x, N, p) #> [1] -193.9824  ebinom(x, size = N, type = \"mle\") #> $prob #> [1] 0.694 #>  ebinom(x, size = N, type = \"me\") #> $prob #> [1] 0.694 #>   mle(D, x) #> $prob #> [1] 0.694 #>  me(D, x) #> $prob #> [1] 0.694 #>  e(D, x, type = \"mle\") #> $prob #> [1] 0.694 #>   # ------------------ # Estimator Variance # ------------------  vbinom(N, p, type = \"mle\") #>  prob  #> 0.021  vbinom(N, p, type = \"me\") #>  prob  #> 0.021   avar_mle(D) #>  prob  #> 0.021  avar_me(D) #>  prob  #> 0.021   v(D, type = \"mle\") #>  prob  #> 0.021"},{"path":"https://thechibo.github.io/joker/reference/calculus.html","id":null,"dir":"Reference","previous_headings":"","what":"Distributional Calculus — calculus","title":"Distributional Calculus — calculus","text":"Arithmetic operators functions probability distribution objects. methods define standard operations like +, -, *, / behave applied random variables, returning resulting distribution based known properties common distribution families.","code":""},{"path":"https://thechibo.github.io/joker/reference/calculus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distributional Calculus — calculus","text":"","code":"# S4 method for class 'Norm,Norm' e1 + e2  # S4 method for class 'numeric,Norm' e1 + e2  # S4 method for class 'Norm,numeric' e1 + e2  # S4 method for class 'Norm,Norm' e1 - e2  # S4 method for class 'numeric,Norm' e1 - e2  # S4 method for class 'Norm,numeric' e1 - e2  # S4 method for class 'numeric,Norm' e1 * e2  # S4 method for class 'Norm,numeric' e1 * e2  # S4 method for class 'Norm,numeric' e1/e2  # S4 method for class 'Norm,logical' sum(x, ..., na.rm = FALSE)  # S4 method for class 'Norm' exp(x)"},{"path":"https://thechibo.github.io/joker/reference/calculus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distributional Calculus — calculus","text":"x, e1, e2 objects subclass Distribution. ... extra arguments. na.rm logical. missing values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/calculus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distributional Calculus — calculus","text":"calculations return Distribution objects (specifically, objects class subclass Distribution), according property hand.","code":""},{"path":"https://thechibo.github.io/joker/reference/calculus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distributional Calculus — calculus","text":"","code":"# ----------------------------------------------------- # Distribution Calculus Example # -----------------------------------------------------  # Normal location - scale transformation x <- Norm(2, 3) y <- 3 * x + 1 # Norm(7, 9)  # Addition of two independent Normal random variables x1 <- Norm(1, 3) x2 <- Norm(2, 4) x3 <- x1 + x2 # Norm(3, 5)"},{"path":"https://thechibo.github.io/joker/reference/Cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Cat Distribution — Cat","title":"Cat Distribution — Cat","text":"Categorical distribution discrete probability distribution describes probability single trial resulting one \\(k\\) possible categories. generalization Bernoulli distribution special case multinomial distribution \\(n = 1\\).","code":""},{"path":"https://thechibo.github.io/joker/reference/Cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cat Distribution — Cat","text":"","code":"Cat(prob = c(0.5, 0.5))  dcat(x, prob, log = FALSE)  rcat(n, prob)  # S4 method for class 'Cat,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Cat,numeric' r(distr, n)  # S4 method for class 'Cat' mean(x)  # S4 method for class 'Cat' mode(x)  # S4 method for class 'Cat' var(x)  # S4 method for class 'Cat' entro(x)  # S4 method for class 'Cat' finf(x)  llcat(x, prob)  # S4 method for class 'Cat,numeric' ll(distr, x)  ecat(x, type = \"mle\", ...)  # S4 method for class 'Cat,numeric' mle(distr, x, dim = NULL, na.rm = FALSE)  # S4 method for class 'Cat,numeric' me(distr, x, dim = NULL, na.rm = FALSE)  vcat(prob, type = \"mle\")  # S4 method for class 'Cat' avar_mle(distr)  # S4 method for class 'Cat' avar_me(distr)"},{"path":"https://thechibo.github.io/joker/reference/Cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cat Distribution — Cat","text":"prob numeric. Probability vector success category. x density function, x numeric vector quantiles. moments functions, x object class Cat. log-likelihood estimation functions, x sample observations. log logical. logarithm probability returned? n number observations. length(n) > 1, length taken number required. distr object class Cat. type character, case ignored. estimator type (mle ). ... extra arguments. dim numeric. probability vector dimension. See Details. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Cat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cat Distribution — Cat","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Cat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cat Distribution — Cat","text":"probability mass function (PMF) categorical distribution given : $$ f(x; p) = \\prod_{=1}^k p_i^{x_i},$$ subject \\( \\sum_{=1}^{k} x_i = n \\). estimation prob sample default return vector probabilities corresponding categories appeared sample 0 rest. However, parameter dimension uncovered sample, provided separately. can done argument dim. dim supplied, dimension retrieved distr argument. Categories appear sample 0 probabilities appended end prob vector. Note actual dimension probability parameter vector k-1, therefore Fisher information matrix asymptotic variance - covariance matrix estimators dimension (k-1)x(k-1).","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cat Distribution — Cat","text":"","code":"# ----------------------------------------------------- # Categorical Distribution Example # -----------------------------------------------------  # Create the distribution p <- c(0.1, 0.2, 0.7) D <- Cat(p)  # ------------------ # dpqr Functions # ------------------  d(D, 2) # density function #> [1] 0.2 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 0.2 0.7 0.7 0.7 0.2 0.1 0.7 0.2 0.7 0.2 0.2 0.2 0.7 0.7 0.7 0.7 0.7 0.7 #>  [19] 0.7 0.7 0.7 0.7 0.2 0.7 0.7 0.7 0.7 0.7 0.2 0.7 0.7 0.7 0.7 0.7 0.7 0.2 #>  [37] 0.2 0.7 0.7 0.2 0.7 0.7 0.7 0.7 0.7 0.7 0.2 0.7 0.2 0.2 0.7 0.7 0.7 0.1 #>  [55] 0.1 0.7 0.2 0.7 0.2 0.7 0.7 0.7 0.1 0.2 0.7 0.7 0.7 0.2 0.7 0.7 0.7 0.7 #>  [73] 0.7 0.7 0.7 0.1 0.7 0.2 0.7 0.7 0.1 0.2 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 #>  [91] 0.1 0.7 0.7 0.2 0.7 0.7 0.7 0.7 0.7 0.7  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 0.1 0.2 0.7 mode(D) # Mode #> [1] 3 var(D) # Variance #>       [,1]  [,2]  [,3] #> [1,]  0.09 -0.02 -0.07 #> [2,] -0.02  0.16 -0.14 #> [3,] -0.07 -0.14  0.21 entro(D) # Entropy #> [1] 0.3250830 0.5004024 0.6108643 finf(D) # Fisher Information Matrix #>           prob1    prob2 #> prob1 11.428571 1.428571 #> prob2  1.428571 6.428571  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 0.1 0.2 0.7  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] -75.59689 llcat(x, p) #> [1] -75.59689  ecat(x, dim = 3, type = \"mle\") #> $prob #> [1] 0.07 0.21 0.72 #>  ecat(x, dim = 3, type = \"me\") #> $prob #> [1] 0.07 0.21 0.72 #>   mle(D, x) #> $prob #> [1] 0.07 0.21 0.72 #>  me(D, x) #> $prob #> [1] 0.07 0.21 0.72 #>  e(D, x, type = \"mle\") #> $prob #> [1] 0.07 0.21 0.72 #>   mle(\"cat\", dim = 3, x) # the distr argument can be a character #> $prob #> [1] 0.07 0.21 0.72 #>   # ------------------ # Estimator Variance # ------------------  vcat(p, type = \"mle\") #>       prob1 prob2 #> prob1  0.09 -0.02 #> prob2 -0.02  0.16 vcat(p, type = \"me\") #>       prob1 prob2 #> prob1  0.09 -0.02 #> prob2 -0.02  0.16  avar_mle(D) #>       prob1 prob2 #> prob1  0.09 -0.02 #> prob2 -0.02  0.16 avar_me(D) #>       prob1 prob2 #> prob1  0.09 -0.02 #> prob2 -0.02  0.16  v(D, type = \"mle\") #>       prob1 prob2 #> prob1  0.09 -0.02 #> prob2 -0.02  0.16"},{"path":"https://thechibo.github.io/joker/reference/Cauchy.html","id":null,"dir":"Reference","previous_headings":"","what":"Cauchy Distribution — Cauchy","title":"Cauchy Distribution — Cauchy","text":"Cauchy distribution absolute continuous probability distribution characterized location parameter \\(x_0\\) scale parameter \\(\\gamma > 0\\).","code":""},{"path":"https://thechibo.github.io/joker/reference/Cauchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cauchy Distribution — Cauchy","text":"","code":"Cauchy(location = 0, scale = 1)  # S4 method for class 'Cauchy,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Cauchy,numeric' p(distr, q, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Cauchy,numeric' qn(distr, p, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Cauchy,numeric' r(distr, n)  # S4 method for class 'Cauchy' mean(x)  # S4 method for class 'Cauchy' median(x)  # S4 method for class 'Cauchy' mode(x)  # S4 method for class 'Cauchy' var(x)  # S4 method for class 'Cauchy' sd(x)  # S4 method for class 'Cauchy' skew(x)  # S4 method for class 'Cauchy' kurt(x)  # S4 method for class 'Cauchy' entro(x)  # S4 method for class 'Cauchy' finf(x)  llcauchy(x, location, scale)  # S4 method for class 'Cauchy,numeric' ll(distr, x)  ecauchy(x, type = \"mle\", ...)  # S4 method for class 'Cauchy,numeric' mle(   distr,   x,   par0 = \"me\",   method = \"L-BFGS-B\",   lower = c(-Inf, 1e-05),   upper = c(Inf, Inf),   na.rm = FALSE )  # S4 method for class 'Cauchy,numeric' me(distr, x, na.rm = FALSE)  vcauchy(location, scale, type = \"mle\")  # S4 method for class 'Cauchy' avar_mle(distr)"},{"path":"https://thechibo.github.io/joker/reference/Cauchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cauchy Distribution — Cauchy","text":"location, scale numeric. Location scale parameters. distr object class Cauchy. x density function, x numeric vector quantiles. moments functions, x object class Cauchy. log-likelihood estimation functions, x sample observations. log, log.p logical. logarithm probability returned? q numeric. Vector quantiles. lower.tail logical. TRUE (default), probabilities \\(P(X \\leq x)\\), otherwise \\(P(X > x)\\). p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required. type character, case ignored. estimator type (mle ). ... extra arguments. par0, method, lower, upper arguments passed optim mle optimization. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Cauchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cauchy Distribution — Cauchy","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Cauchy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cauchy Distribution — Cauchy","text":"probability density function (PDF) Cauchy distribution given : $$ f(x; x_0, \\gamma) = \\frac{1}{\\pi \\gamma \\left[1 + \\left(\\frac{x - x_0}{\\gamma}\\right)^2\\right]}.$$ MLE Cauchy distribution parameters available closed form approximated numerically. done optim(). default method used L-BFGS-B method lower bounds c(-Inf, 1e-5) upper bounds c(Inf, Inf). par0 argument can either numeric (elements satisfying lower <= par0 <= upper) character specifying closed-form estimator used initialization algorithm (\"\" - default value). Note () estimator Cauchy distribution moment estimator; utilizes sample median instead sample mean.","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Cauchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cauchy Distribution — Cauchy","text":"","code":"# ----------------------------------------------------- # Cauchy Distribution Example # -----------------------------------------------------  # Create the distribution x0 <- 3 ; scale <- 5 D <- Cauchy(x0, scale)  # ------------------ # dpqr Functions # ------------------  d(D, c(-5, 3, 10)) # density function #> [1] 0.01788258 0.06366198 0.02150742 p(D, c(-5, 3, 10)) # distribution function #> [1] 0.1778077 0.5000000 0.8025685 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 1.375402 9.881910 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 4.495215e-02 5.988423e-02 6.346378e-02 2.748064e-02 6.312939e-02 #>   [6] 7.761154e-04 4.777694e-02 6.155906e-02 1.043303e-03 9.013950e-03 #>  [11] 5.483888e-03 3.043508e-02 3.696916e-04 6.332635e-06 6.352595e-02 #>  [16] 6.255582e-02 1.372709e-03 6.344792e-02 1.247492e-03 1.153462e-02 #>  [21] 6.218878e-06 6.022580e-02 6.309034e-02 1.287954e-02 6.351241e-02 #>  [26] 8.168228e-04 3.404109e-02 2.569378e-03 3.749158e-02 1.139680e-02 #>  [31] 8.769975e-03 1.161357e-02 4.959531e-02 1.168138e-03 4.555847e-02 #>  [36] 6.294724e-02 2.457766e-02 6.327364e-02 9.530000e-03 4.680007e-02 #>  [41] 1.201784e-02 2.362168e-02 5.372659e-02 2.551076e-02 4.659739e-02 #>  [46] 5.639920e-02 4.557955e-03 5.065729e-02 5.987046e-02 1.749810e-02 #>  [51] 1.302616e-02 6.361489e-02 2.953371e-03 2.683870e-02 4.716099e-03 #>  [56] 1.611663e-03 4.949695e-02 6.250720e-02 1.912409e-02 1.302444e-04 #>  [61] 6.182647e-02 4.940659e-02 6.105330e-02 3.425083e-02 5.987893e-02 #>  [66] 5.310415e-02 4.349224e-02 2.190097e-03 2.858259e-02 1.317051e-02 #>  [71] 6.347343e-02 5.078716e-03 1.140682e-02 1.352965e-02 5.156731e-02 #>  [76] 1.842270e-02 5.201057e-02 4.865491e-02 5.521374e-02 3.428899e-02 #>  [81] 3.806395e-03 5.733399e-02 1.403388e-02 3.400095e-02 2.806059e-02 #>  [86] 5.093214e-02 6.329526e-02 5.596420e-02 6.310795e-02 1.281236e-02 #>  [91] 6.170678e-02 4.523291e-04 2.302247e-02 7.343031e-03 5.488240e-02 #>  [96] 9.956255e-03 2.429431e-02 7.572407e-03 6.292009e-02 1.578130e-02  # ------------------ # Moments # ------------------  median(D) # Median #> [1] 3 mode(D) # Mode #> [1] 3 entro(D) # Entropy #> [1] 4.140462 finf(D) # Fisher Information Matrix #>          location scale #> location     0.02  0.00 #> scale        0.00  0.02  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] -413.4715 llcauchy(x, x0, scale) #> [1] -413.4715  ecauchy(x, type = \"mle\") #> $location #> [1] 1.652551 #>  #> $scale #> [1] 4.804924 #>  ecauchy(x, type = \"me\") #> $location #> [1] 1.940115 #>  #> $scale #> [1] 4.525654 #>   mle(D, x) #> $location #> [1] 1.652551 #>  #> $scale #> [1] 4.804924 #>  me(D, x) #> $location #> [1] 1.940115 #>  #> $scale #> [1] 4.525654 #>  e(D, x, type = \"mle\") #> $location #> [1] 1.652551 #>  #> $scale #> [1] 4.804924 #>   mle(\"cauchy\", x) # the distr argument can be a character #> $location #> [1] 1.652551 #>  #> $scale #> [1] 4.804924 #>   # ------------------ # Estimator Variance # ------------------  vcauchy(x0, scale, type = \"mle\") #>          location scale #> location       50     0 #> scale           0    50 avar_mle(D) #>          location scale #> location       50     0 #> scale           0    50 v(D, type = \"mle\") #>          location scale #> location       50     0 #> scale           0    50"},{"path":"https://thechibo.github.io/joker/reference/check_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the Data — check_data","title":"Check the Data — check_data","text":"function checks data argument supplied user parameter estimation appropriate type.","code":""},{"path":"https://thechibo.github.io/joker/reference/check_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the Data — check_data","text":"","code":"check_data(x, na.rm = FALSE)"},{"path":"https://thechibo.github.io/joker/reference/check_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the Data — check_data","text":"x object checked. vector, matrix, array. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/check_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the Data — check_data","text":"object x, possibly without NA values x vector containing NA values na.rm = TRUE.","code":""},{"path":"https://thechibo.github.io/joker/reference/check_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the Data — check_data","text":"","code":"if (FALSE) { # \\dontrun{ check_data(r(Beta(2, 3), 20)) check_data(c(1, 2, NA)) check_data(c(1, 2, NA), na.rm = TRUE) check_data(c(1, 2, NaN)) check_data(c(1, 2, Inf)) } # }"},{"path":"https://thechibo.github.io/joker/reference/check_optim.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Optim Arguments — check_optim","title":"Check Optim Arguments — check_optim","text":"Checks arguments supplied user appropriate passed optim(). Used internally parameter estimation.","code":""},{"path":"https://thechibo.github.io/joker/reference/check_optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Optim Arguments — check_optim","text":"","code":"check_optim(par0, method, lower, upper, choices = NULL, len = 1)"},{"path":"https://thechibo.github.io/joker/reference/check_optim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Optim Arguments — check_optim","text":"par0 numeric character. numeric, passed optim initial estimation, .e. par argument. character, corresponding estimation method called result passed optim instead. method, lower, upper arguments passed optim. choices character. vector available estimation methods par0 argument len integer. appropriate length lower upper argument, well par numeric.","code":""},{"path":"https://thechibo.github.io/joker/reference/check_optim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Optim Arguments — check_optim","text":"par0, possibly altered via match.arg() character.","code":""},{"path":"https://thechibo.github.io/joker/reference/check_optim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Optim Arguments — check_optim","text":"","code":"if (FALSE) { # \\dontrun{ check_optim(\"me\", \"L-BFGS-B\", 1e-5, Inf, choices = c(\"me\", \"same\"), len = 1) } # }"},{"path":"https://thechibo.github.io/joker/reference/Chisq.html","id":null,"dir":"Reference","previous_headings":"","what":"Chi-Square Distribution — Chisq","title":"Chi-Square Distribution — Chisq","text":"Chi-Square distribution continuous probability distribution commonly used statistical inference, particularly hypothesis testing confidence interval estimation. defined degrees freedom parameter \\(k > 0\\).","code":""},{"path":"https://thechibo.github.io/joker/reference/Chisq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chi-Square Distribution — Chisq","text":"","code":"Chisq(df = 1)  # S4 method for class 'Chisq,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Chisq,numeric' p(distr, q, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Chisq,numeric' qn(distr, p, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Chisq,numeric' r(distr, n)  # S4 method for class 'Chisq' mean(x)  # S4 method for class 'Chisq' median(x)  # S4 method for class 'Chisq' mode(x)  # S4 method for class 'Chisq' var(x)  # S4 method for class 'Chisq' sd(x)  # S4 method for class 'Chisq' skew(x)  # S4 method for class 'Chisq' kurt(x)  # S4 method for class 'Chisq' entro(x)  # S4 method for class 'Chisq' finf(x)  llchisq(x, df)  # S4 method for class 'Chisq,numeric' ll(distr, x)  echisq(x, type = \"mle\", ...)  # S4 method for class 'Chisq,numeric' mle(distr, x, na.rm = FALSE)  # S4 method for class 'Chisq,numeric' me(distr, x, na.rm = FALSE)  vchisq(df, type = \"mle\")  # S4 method for class 'Chisq' avar_mle(distr)  # S4 method for class 'Chisq' avar_me(distr)"},{"path":"https://thechibo.github.io/joker/reference/Chisq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chi-Square Distribution — Chisq","text":"df numeric. distribution degrees freedom parameter. distr object class Chisq. x density function, x numeric vector quantiles. moments functions, x object class Chisq. log-likelihood estimation functions, x sample observations. log, log.p logical. logarithm probability returned? q numeric. Vector quantiles. lower.tail logical. TRUE (default), probabilities \\(P(X \\leq x)\\), otherwise \\(P(X > x)\\). p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required. type character, case ignored. estimator type (mle ). ... extra arguments. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Chisq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chi-Square Distribution — Chisq","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Chisq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Chi-Square Distribution — Chisq","text":"probability density function (PDF) Chi-Square distribution given : $$ f(x; k) = \\frac{1}{2^{k/2}\\Gamma(k/2)} x^{k/2 - 1} e^{-x/2}, \\quad x > 0.$$","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Chisq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chi-Square Distribution — Chisq","text":"","code":"# ----------------------------------------------------- # Chi-Square Distribution Example # -----------------------------------------------------  # Create the distribution df <- 4 D <- Chisq(df)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 2, 20)) # density function #> [1] 0.0645530982 0.1839397206 0.0002269996 p(D, c(0.3, 2, 20)) # distribution function #> [1] 0.01018583 0.26424112 0.99950060 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 2.752843 5.988617 x <- r(D, 100) # random generator function  # alternative way to use the function den <- d(D) ; den(x) # den is a function itself #>   [1] 0.133953207 0.164372580 0.061167945 0.180660927 0.174835417 0.108700553 #>   [7] 0.138664831 0.040800770 0.162150332 0.013945291 0.093442703 0.180306346 #>  [13] 0.137114795 0.108305576 0.071478724 0.026122074 0.147013834 0.045141412 #>  [19] 0.176801357 0.140182239 0.165428195 0.177971246 0.179869433 0.183423316 #>  [25] 0.037316723 0.160314631 0.140127465 0.058395116 0.145650196 0.176000243 #>  [31] 0.038087718 0.183549972 0.183296800 0.167474672 0.179512445 0.092969911 #>  [37] 0.024571943 0.173870921 0.043376505 0.170032217 0.100929314 0.153545515 #>  [43] 0.178074797 0.175667801 0.182831762 0.180404260 0.183897326 0.118782037 #>  [49] 0.124520757 0.182993616 0.157269677 0.134646397 0.165900547 0.166826100 #>  [55] 0.082072134 0.178706289 0.032388255 0.140453386 0.178009998 0.016499929 #>  [61] 0.112873222 0.040779485 0.168101057 0.027434484 0.169054027 0.175343119 #>  [67] 0.003212128 0.179366331 0.043308014 0.114698982 0.122145926 0.053932259 #>  [73] 0.154485631 0.061410215 0.038025940 0.182701756 0.076429640 0.084788087 #>  [79] 0.032987205 0.135332434 0.177135342 0.126736451 0.153414844 0.123765081 #>  [85] 0.119646588 0.152191981 0.109532390 0.183845108 0.134598051 0.163049617 #>  [91] 0.158686700 0.055062468 0.072454775 0.158352837 0.063773699 0.179371874 #>  [97] 0.059828101 0.051063159 0.173934256 0.183076805  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 4 var(D) # Variance #> [1] 8 sd(D) # Standard Deviation #> [1] 2.828427 skew(D) # Skewness #> [1] 1.414214 kurt(D) # Excess Kurtosis #> [1] 3 entro(D) # Entropy #> [1] 2.270363 finf(D) # Fisher Information Matrix #>        df  #> 0.1612335   # List of all available moments mom <- moments(D) #> Warning: The median of the Chi-Squared Distribution is not #>           available in closed-form. An approximation is provided. mom$mean # expectation #> [1] 4  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] -226.357 llchisq(x, df) #> [1] -226.357  echisq(x, type = \"mle\") #> $df #> [1] 3.577199 #>  echisq(x, type = \"me\") #> $df #> [1] 3.693955 #>   mle(D, x) #> $df #> [1] 3.577199 #>  me(D, x) #> $df #> [1] 3.693955 #>  e(D, x, type = \"mle\") #> $df #> [1] 3.577199 #>   mle(\"chisq\", x) # the distr argument can be a character #> $df #> [1] 3.577199 #>   # ------------------ # Estimator Variance # ------------------  vchisq(df, type = \"mle\") #>       df  #> 6.202184  vchisq(df, type = \"me\") #> df  #>  8   avar_mle(D) #>       df  #> 6.202184  avar_me(D) #> df  #>  8   v(D, type = \"mle\") #>       df  #> 6.202184"},{"path":"https://thechibo.github.io/joker/reference/Dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Dirichlet Distribution — Dir","title":"Dirichlet Distribution — Dir","text":"Dirichlet distribution absolute continuous probability, specifically multivariate generalization beta distribution, parameterized vector \\(\\boldsymbol{\\alpha} = (\\alpha_1, \\alpha_2, ..., \\alpha_k)\\) \\(\\alpha_i > 0\\).","code":""},{"path":"https://thechibo.github.io/joker/reference/Dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dirichlet Distribution — Dir","text":"","code":"Dir(alpha = c(1, 1))  ddir(x, alpha, log = FALSE)  rdir(n, alpha)  # S4 method for class 'Dir,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Dir,matrix' d(distr, x)  # S4 method for class 'Dir,numeric' r(distr, n)  # S4 method for class 'Dir' mean(x)  # S4 method for class 'Dir' mode(x)  # S4 method for class 'Dir' var(x)  # S4 method for class 'Dir' entro(x)  # S4 method for class 'Dir' finf(x)  lldir(x, alpha)  # S4 method for class 'Dir,matrix' ll(distr, x)  edir(x, type = \"mle\", ...)  # S4 method for class 'Dir,matrix' mle(   distr,   x,   par0 = \"same\",   method = \"L-BFGS-B\",   lower = 1e-05,   upper = Inf,   na.rm = FALSE )  # S4 method for class 'Dir,matrix' me(distr, x, na.rm = FALSE)  # S4 method for class 'Dir,matrix' same(distr, x, na.rm = FALSE)  vdir(alpha, type = \"mle\")  # S4 method for class 'Dir' avar_mle(distr)  # S4 method for class 'Dir' avar_me(distr)  # S4 method for class 'Dir' avar_same(distr)"},{"path":"https://thechibo.github.io/joker/reference/Dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dirichlet Distribution — Dir","text":"alpha numeric. non-negative distribution parameter vector. x density function, x numeric vector quantiles. moments functions, x object class Dir. log-likelihood estimation functions, x sample observations. log logical. logarithm probability returned? n number observations. length(n) > 1, length taken number required. distr object class Dir. type character, case ignored. estimator type (mle, , ). ... extra arguments. par0, method, lower, upper arguments passed optim mle optimization. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dirichlet Distribution — Dir","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Dir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dirichlet Distribution — Dir","text":"probability density function (PDF) Dirichlet distribution given : $$ f(x_1, ..., x_k; \\alpha_1, ..., \\alpha_k) = \\frac{1}{B(\\boldsymbol{\\alpha})} \\prod_{=1}^k x_i^{\\alpha_i - 1}, $$ \\(B(\\boldsymbol{\\alpha})\\) multivariate Beta function: $$ B(\\boldsymbol{\\alpha}) = \\frac{\\prod_{=1}^k \\Gamma(\\alpha_i)}{\\Gamma\\left(\\sum_{=1}^k \\alpha_i\\right)} $$ \\(\\sum_{=1}^k x_i = 1\\), \\(x_i > 0\\).","code":""},{"path":"https://thechibo.github.io/joker/reference/Dir.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dirichlet Distribution — Dir","text":"Oikonomidis, . & Trevezas, S. (2025), Moment-Type Estimators Dirichlet Multivariate Gamma Distributions, arXiv, https://arxiv.org/abs/2311.15025","code":""},{"path":"https://thechibo.github.io/joker/reference/Dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dirichlet Distribution — Dir","text":"","code":"# ----------------------------------------------------- # Dir Distribution Example # -----------------------------------------------------  # Create the distribution a <- c(0.5, 2, 5) D <- Dir(a)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 0.2, 0.5)) # density function #> [1] 1.003913 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1]  24.77300121   7.30983973   0.82018079   3.09639840   9.01982497 #>   [6]  39.84500725 330.11542526   9.42548756   4.61888811   2.27497931 #>  [11]  64.27091137  18.62530960   2.10211248   1.63802351   1.19686120 #>  [16]   8.25251246  17.90121464   0.74870277   8.72460022   0.55837485 #>  [21]   8.21813142   1.88378114  18.25077604  36.30299265 193.49162463 #>  [26]  16.48802269   7.72075754   1.92680717   1.59190279   2.49922116 #>  [31]   7.30498152 125.93965445   0.54948163   2.53622638  56.48520822 #>  [36]   0.43959178   6.73568100  56.29973185  19.69573566   2.82021054 #>  [41]  17.76917321   2.44265070 136.52489485   6.02799115   9.74419696 #>  [46] 103.22800743  62.45528918  59.23861402  16.72800114  12.04350492 #>  [51]   0.21314095  15.49143498  20.53195188   8.40650362  15.71665753 #>  [56]   3.40624205   7.31707158  16.34273035   9.23467406  66.67870933 #>  [61] 103.58033370   0.05178777   2.78600739  44.65538491  16.32873325 #>  [66]   6.18668122   7.92540146  16.90022450   7.97774674 132.13019415 #>  [71]  13.78471007   9.94941804   3.18909544   3.71704118   1.92530182 #>  [76]   6.59831401  16.47057195   0.92414964 129.28524193   1.24635003 #>  [81]  80.27388019 476.34209004   3.11768072  13.39764640  29.41641117 #>  [86]   1.99204330   9.86443108  28.78544730   0.55269678  26.26901025 #>  [91]  20.60548672   5.84967397  12.47014567  50.39362983   1.54175468 #>  [96]   9.07270050   6.03121668  12.81735187   5.22700358   2.67761296  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 0.06666667 0.26666667 0.66666667 mode(D) # Mode #> [1] -0.1111111  0.2222222  0.8888889 var(D) # Variance #>              [,1]         [,2]         [,3] #> [1,]  0.007320261 -0.002091503 -0.005228758 #> [2,] -0.002091503  0.023006536 -0.020915032 #> [3,] -0.005228758 -0.020915032  0.026143791 entro(D) # Entropy #> [1] -2.452547 finf(D) # Fisher Information Matrix #>            alpha1     alpha2      alpha3 #> alpha1  4.7921863 -0.1426159 -0.14261590 #> alpha2 -0.1426159  0.5023182 -0.14261590 #> alpha3 -0.1426159 -0.1426159  0.07870706  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 0.06666667 0.26666667 0.66666667  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] 219.6185 lldir(x, a) #> [1] 219.6185  edir(x, type = \"mle\") #> $alpha #> [1] 0.5942496 1.9223128 5.0267809 #>  edir(x, type = \"me\") #> $alpha #> [1] 0.8187913 2.2631115 5.9893682 #>   mle(D, x) #> $alpha #> [1] 0.5942496 1.9223128 5.0267809 #>  me(D, x) #> $alpha #> [1] 0.8187913 2.2631115 5.9893682 #>  e(D, x, type = \"mle\") #> $alpha #> [1] 0.5942496 1.9223128 5.0267809 #>   mle(\"dir\", x) # the distr argument can be a character #> $alpha #> [1] 0.5942496 1.9223128 5.0267809 #>   # ------------------ # Estimator Variance # ------------------  vdir(a, type = \"mle\") #>           alpha1    alpha2    alpha3 #> alpha1 0.2581065 0.4243918  1.236676 #> alpha2 0.4243918 4.7978389  9.462596 #> alpha3 1.2366759 9.4625963 32.092246 vdir(a, type = \"me\") #>           alpha1    alpha2    alpha3 #> alpha1 0.6967287  1.109928  3.213417 #> alpha2 1.1099281  6.555295 13.730859 #> alpha3 3.2134166 13.730859 43.124878  avar_mle(D) #>           alpha1    alpha2    alpha3 #> alpha1 0.2581065 0.4243918  1.236676 #> alpha2 0.4243918 4.7978389  9.462596 #> alpha3 1.2366759 9.4625963 32.092246 avar_me(D) #>           alpha1    alpha2    alpha3 #> alpha1 0.6967287  1.109928  3.213417 #> alpha2 1.1099281  6.555295 13.730859 #> alpha3 3.2134166 13.730859 43.124878  v(D, type = \"mle\") #>           alpha1    alpha2    alpha3 #> alpha1 0.2581065 0.4243918  1.236676 #> alpha2 0.4243918 4.7978389  9.462596 #> alpha3 1.2366759 9.4625963 32.092246"},{"path":"https://thechibo.github.io/joker/reference/DistrFunctionals.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution Functionals — DistrFunctionals","title":"Distribution Functionals — DistrFunctionals","text":"collection S4 classes provide flexible structured way work probability distributions.","code":""},{"path":"https://thechibo.github.io/joker/reference/DistrFunctionals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution Functionals — DistrFunctionals","text":"","code":"# S4 method for class 'Distribution,missing' d(distr, x, ...)  # S4 method for class 'Distribution,missing' p(distr, q, ...)  # S4 method for class 'Distribution,missing' qn(distr, p, ...)  # S4 method for class 'Distribution,missing' r(distr, n, ...)  # S4 method for class 'Distribution,missing' ll(distr, x, ...)  # S4 method for class 'Distribution,missing' mle(distr, x, ...)  # S4 method for class 'Distribution,missing' me(distr, x, ...)  # S4 method for class 'Distribution,missing' same(distr, x, ...)"},{"path":"https://thechibo.github.io/joker/reference/DistrFunctionals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution Functionals — DistrFunctionals","text":"distr Distribution object. x, q, p, n missing. Arguments supplied. ... extra arguments.","code":""},{"path":"https://thechibo.github.io/joker/reference/DistrFunctionals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution Functionals — DistrFunctionals","text":"supplied one argument, d(), p(), q(), r() ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively.","code":""},{"path":"https://thechibo.github.io/joker/reference/DistrFunctionals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distribution Functionals — DistrFunctionals","text":"x, q, p, n missing, methods return function takes input missing argument, allowing user work function object . See examples.","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/DistrFunctionals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution Functionals — DistrFunctionals","text":"","code":"# ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  # Create the distribution a <- 3 ; b <- 5 D <- Beta(a, b)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 0.8, 0.5)) # density function #> [1] 2.268945 0.107520 1.640625 p(D, c(0.3, 0.8, 0.5)) # distribution function #> [1] 0.3529305 0.9953280 0.7734375 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 0.3205858 0.5167578 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 2.2688239 2.0822803 1.5596763 1.2658636 2.1298589 1.9721568 2.2678160 #>   [8] 0.6188839 0.7372715 1.4928304 2.1499268 0.9990784 1.7734311 1.8801695 #>  [15] 2.0560081 2.1490984 1.9885426 2.2750859 2.2233764 0.2011700 2.2773168 #>  [22] 1.8810714 0.4837951 0.3835223 1.1104447 2.2154812 1.8131558 1.8588335 #>  [29] 1.4949584 2.2981017 1.9670601 0.9837032 2.0391066 2.2264502 1.7583458 #>  [36] 0.1538213 1.0138898 1.7693833 2.1339819 1.1298840 2.2580467 0.2945460 #>  [43] 2.2993173 1.5926982 2.0195034 2.0213303 2.1338020 1.8982922 2.0594952 #>  [50] 2.2917273 2.3022275 1.9902124 2.3015053 2.1832932 2.2279826 1.1646770 #>  [57] 1.8333530 1.5177388 1.3791370 2.1763079 1.8659916 1.1347729 1.7959103 #>  [64] 2.2836829 1.4367079 2.0781145 2.2777611 0.9543203 2.3032960 1.8661748 #>  [71] 1.6050071 1.3730708 0.7714459 0.6156657 1.7956211 2.2975234 2.2924535 #>  [78] 2.2154532 2.1185343 0.9609232 1.7518622 1.6764195 2.0484906 2.0391902 #>  [85] 1.9682763 2.2897504 1.4383587 0.5083482 2.2480721 2.1269161 0.9895356 #>  [92] 2.1883626 2.3014570 1.9681308 1.1502719 1.7561375 2.2357168 1.8403537 #>  [99] 2.2875825 2.2204210  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 0.375 var(D) # Variance #> [1] 0.02604167 sd(D) # Standard Deviation #> [1] 0.1613743 skew(D) # Skewness #> [1] 0.3098387 kurt(D) # Excess Kurtosis #> [1] 0.04 entro(D) # Entropy #> [1] -0.4301508 finf(D) # Fisher Information Matrix #>            shape1      shape2 #> shape1  0.2617971 -0.13313701 #> shape2 -0.1331370  0.08818594  # List of all available moments mom <- moments(D) mom$mean # expectation #> NULL  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] 45.75132 llbeta(x, a, b) #> [1] 45.75132  ebeta(x, type = \"mle\") #> $shape1 #> [1] 3.40893 #>  #> $shape2 #> [1] 5.422875 #>  ebeta(x, type = \"me\") #> $shape1 #> [1] 3.427886 #>  #> $shape2 #> [1] 5.444066 #>  ebeta(x, type = \"same\") #> $shape1 #> [1] 3.417856 #>  #> $shape2 #> [1] 5.428137 #>   mle(D, x) #> $shape1 #> [1] 3.40893 #>  #> $shape2 #> [1] 5.422875 #>  me(D, x) #> $shape1 #> [1] 3.427886 #>  #> $shape2 #> [1] 5.444066 #>  same(D, x) #> $shape1 #> [1] 3.417856 #>  #> $shape2 #> [1] 5.428137 #>  e(D, x, type = \"mle\") #> $shape1 #> [1] 3.40893 #>  #> $shape2 #> [1] 5.422875 #>   mle(\"beta\", x) # the distr argument can be a character #> $shape1 #> [1] 3.40893 #>  #> $shape2 #> [1] 5.422875 #>   # ------------------ # Estimator Variance # ------------------  vbeta(a, b, type = \"mle\") #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 vbeta(a, b, type = \"me\") #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 vbeta(a, b, type = \"same\") #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  avar_mle(D) #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 avar_me(D) #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 avar_same(D) #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  v(D, type = \"mle\") #> Error in v(D, type = \"mle\"): could not find function \"v\""},{"path":"https://thechibo.github.io/joker/reference/distrhelpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution Handling Helpers — distrhelpers","title":"Distribution Handling Helpers — distrhelpers","text":"set functions help handle distribution classes. See Details.","code":""},{"path":"https://thechibo.github.io/joker/reference/distrhelpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution Handling Helpers — distrhelpers","text":"","code":"get_moment_methods(x)  get_class_abbr(distr)  get_distr_class(distr)  s4_to_list(distr)  get_params(distr, list = TRUE)  get_unknown_params(distr, list = TRUE)  update_params(distr, prm, i)"},{"path":"https://thechibo.github.io/joker/reference/distrhelpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution Handling Helpers — distrhelpers","text":"x, distr object class Distribution. list logical. list returned? FALSE, return object wrapped unlist(). prm, list containing three elements (name, pos, val) -th element val updated new parameter. See small_metrics().","code":""},{"path":"https://thechibo.github.io/joker/reference/distrhelpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution Handling Helpers — distrhelpers","text":"Depends function. See Details.","code":""},{"path":"https://thechibo.github.io/joker/reference/distrhelpers.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Distribution Handling Helpers — distrhelpers","text":"get_moment_methods(): Returns character vector available moment methods distribution. get_class_abbr(): Turns S4 class name (character) used d notation. get_distr_class(): Turns distribution name character S4 class. s4_to_list(): Turns S4 distr object list. get_params(): Get parameters distribution list. get_unknown_params(): Get unknown parameters distribution list. update_params(): Update distribution parameters. Returns distribution object. Used inside small_metrics() large_metrics() functions.","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/distrhelpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution Handling Helpers — distrhelpers","text":"","code":"if (FALSE) { # \\dontrun{ distr <- Beta(1, 2) get_moment_methods(distr) get_class_abbr(distr) get_distr_class(\"Gamma\") s4_to_list(distr) get_params(distr, list = TRUE) get_params(distr, list = FALSE) get_unknown_params(distr) } # }"},{"path":"https://thechibo.github.io/joker/reference/Distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution S4 Classes — distributions","title":"Distribution S4 Classes — distributions","text":"collection S4 classes provide flexible structured way work probability distributions.","code":""},{"path":"https://thechibo.github.io/joker/reference/Distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution S4 Classes — distributions","text":"","code":"d(distr, x, ...)  p(distr, q, ...)  qn(distr, p, ...)  r(distr, n, ...)"},{"path":"https://thechibo.github.io/joker/reference/Distributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution S4 Classes — distributions","text":"distr object class Distribution one subclasses. x density function, x numeric vector quantiles. moments functions, x object class Distribution  one subclasses. log-likelihood estimation functions, x sample observations. ... extra arguments. q numeric. Vector quantiles. p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required.","code":""},{"path":"https://thechibo.github.io/joker/reference/Distributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution S4 Classes — distributions","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Distributions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distribution S4 Classes — distributions","text":"S4 generic methods can work functions functionals (functions return functions). available distribution families coded S4 classes, specifically subclasses Distribution superclass. methods can used two ways: Option 1: distr argument x n supplied, function evaluated directly, usual. Option 2: distr argument supplied, method returns function takes input missing argument x n, allowing user work function object . See examples. Looking specific distribution family? help page general. Use help page distribution see available methods class, details, examples. Check See Also section.","code":""},{"path":"https://thechibo.github.io/joker/reference/Distributions.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Distribution S4 Classes — distributions","text":"d(): density function p(): cumulative distribution function qn(): generalized inverse distribution function r(): random sample generator function","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Distributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution S4 Classes — distributions","text":"","code":"# ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  # Create the distribution a <- 3 b <- 5 D <- Beta(a, b)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 0.8, 0.5)) # density function #> [1] 2.268945 0.107520 1.640625 p(D, c(0.3, 0.8, 0.5)) # distribution function #> [1] 0.3529305 0.9953280 0.7734375 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 0.3205858 0.5167578 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 2.2688239 2.0822803 1.5596763 1.2658636 2.1298589 1.9721568 2.2678160 #>   [8] 0.6188839 0.7372715 1.4928304 2.1499268 0.9990784 1.7734311 1.8801695 #>  [15] 2.0560081 2.1490984 1.9885426 2.2750859 2.2233764 0.2011700 2.2773168 #>  [22] 1.8810714 0.4837951 0.3835223 1.1104447 2.2154812 1.8131558 1.8588335 #>  [29] 1.4949584 2.2981017 1.9670601 0.9837032 2.0391066 2.2264502 1.7583458 #>  [36] 0.1538213 1.0138898 1.7693833 2.1339819 1.1298840 2.2580467 0.2945460 #>  [43] 2.2993173 1.5926982 2.0195034 2.0213303 2.1338020 1.8982922 2.0594952 #>  [50] 2.2917273 2.3022275 1.9902124 2.3015053 2.1832932 2.2279826 1.1646770 #>  [57] 1.8333530 1.5177388 1.3791370 2.1763079 1.8659916 1.1347729 1.7959103 #>  [64] 2.2836829 1.4367079 2.0781145 2.2777611 0.9543203 2.3032960 1.8661748 #>  [71] 1.6050071 1.3730708 0.7714459 0.6156657 1.7956211 2.2975234 2.2924535 #>  [78] 2.2154532 2.1185343 0.9609232 1.7518622 1.6764195 2.0484906 2.0391902 #>  [85] 1.9682763 2.2897504 1.4383587 0.5083482 2.2480721 2.1269161 0.9895356 #>  [92] 2.1883626 2.3014570 1.9681308 1.1502719 1.7561375 2.2357168 1.8403537 #>  [99] 2.2875825 2.2204210  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 0.375 var(D) # Variance #> [1] 0.02604167 sd(D) # Standard Deviation #> [1] 0.1613743 skew(D) # Skewness #> [1] 0.3098387 kurt(D) # Excess Kurtosis #> [1] 0.04 entro(D) # Entropy #> [1] -0.4301508 finf(D) # Fisher Information Matrix #>            shape1      shape2 #> shape1  0.2617971 -0.13313701 #> shape2 -0.1331370  0.08818594  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 0.375  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] 45.75132 llbeta(x, a, b) #> [1] 45.75132  ebeta(x, type = \"mle\") #> $shape1 #> [1] 3.40893 #>  #> $shape2 #> [1] 5.422875 #>  ebeta(x, type = \"me\") #> $shape1 #> [1] 3.427886 #>  #> $shape2 #> [1] 5.444066 #>  ebeta(x, type = \"same\") #> $shape1 #> [1] 3.417856 #>  #> $shape2 #> [1] 5.428137 #>   mle(D, x) #> $shape1 #> [1] 3.40893 #>  #> $shape2 #> [1] 5.422875 #>  me(D, x) #> $shape1 #> [1] 3.427886 #>  #> $shape2 #> [1] 5.444066 #>  same(D, x) #> $shape1 #> [1] 3.417856 #>  #> $shape2 #> [1] 5.428137 #>  e(D, x, type = \"mle\") #> $shape1 #> [1] 3.40893 #>  #> $shape2 #> [1] 5.422875 #>   mle(\"beta\", x) # the distr argument can be a character #> $shape1 #> [1] 3.40893 #>  #> $shape2 #> [1] 5.422875 #>   # ------------------ # Estimator Variance # ------------------  vbeta(a, b, type = \"mle\") #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 vbeta(a, b, type = \"me\") #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 vbeta(a, b, type = \"same\") #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  avar_mle(D) #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 avar_me(D) #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 avar_same(D) #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  v(D, type = \"mle\") #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039"},{"path":"https://thechibo.github.io/joker/reference/estimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter Estimation — estimation","title":"Parameter Estimation — estimation","text":"set functions estimates parameters random sample according specified family distributions. See details.","code":""},{"path":"https://thechibo.github.io/joker/reference/estimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Estimation — estimation","text":"","code":"e(distr, x, type = \"mle\", ...)  mle(distr, x, ...)  # S4 method for class 'character,ANY' mle(distr, x, ...)  me(distr, x, ...)  # S4 method for class 'character,ANY' me(distr, x, ...)  same(distr, x, ...)  # S4 method for class 'character,ANY' same(distr, x, ...)"},{"path":"https://thechibo.github.io/joker/reference/estimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Estimation — estimation","text":"distr Distribution object character. distribution family assumed. x numeric. sample estimation. type character, case ignored. estimator type. ... extra arguments.","code":""},{"path":"https://thechibo.github.io/joker/reference/estimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter Estimation — estimation","text":"list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known.","code":""},{"path":"https://thechibo.github.io/joker/reference/estimation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameter Estimation — estimation","text":"package covers three major estimation methods: maximum likelihood estimation (MLE), moment estimation (), score-adjusted estimation (). order perform parameter estimation, new e<name>() member added d(), p(), q(), r() family, following standard stats name convention. functions take two arguments, observations x (atomic vector univariate matrix multivariate distributions) type estimation method use (character possible values \"mle\", \"\", \"\".) Point estimation functions available two versions, distribution specific one, e.g. ebeta(), S4 generic ones, namely mle(), (), (). general function called e() also implemented, covering distributions estimators.","code":""},{"path":"https://thechibo.github.io/joker/reference/estimation.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Parameter Estimation — estimation","text":"mle(): Maximum Likelihood Estimator (): Moment Estimator (): Score - Adjusted Moment Estimation","code":""},{"path":"https://thechibo.github.io/joker/reference/estimation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parameter Estimation — estimation","text":"General Textbooks Van der Vaart, . W. (2000), Asymptotic statistics, Vol. 3, Cambridge university press. Beta gamma distribution families Ye, Z.-S. & Chen, N. (2017), Closed-form estimators gamma distribution derived likelihood equations, American Statistician 71(2), 177–181. Tamae, H., Irie, K. & Kubokawa, T. (2020), score-adjusted approach closed-form estimators gamma beta distributions, Japanese Journal Statistics Data Science 3, 543–561. Mathal, . & Moschopoulos, P. (1992), form multivariate gamma distribution, Annals Institute Statistical Mathematics 44, 97–106. Oikonomidis, . & Trevezas, S. (2023), Moment-Type Estimators Dirichlet Multivariate Gamma Distributions, arXiv, https://arxiv.org/abs/2311.15025","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/estimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter Estimation — estimation","text":"","code":"# ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  # Create the distribution a <- 3 b <- 5 D <- Beta(a, b)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 0.8, 0.5)) # density function #> [1] 2.268945 0.107520 1.640625 p(D, c(0.3, 0.8, 0.5)) # distribution function #> [1] 0.3529305 0.9953280 0.7734375 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 0.3205858 0.5167578 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 1.4198971 2.3026811 2.1527876 2.1559828 2.2952240 1.4998853 1.1787365 #>   [8] 2.2698479 1.8325384 1.4823383 0.5134081 2.1501205 1.4832977 1.9415785 #>  [15] 2.0739930 1.2975502 1.0864139 2.0698490 2.3008319 0.9729585 1.3533122 #>  [22] 1.1679036 1.0766764 1.8842418 1.3777491 0.5970010 1.9569397 0.5283950 #>  [29] 2.2894999 1.0217671 1.9408534 1.5536234 1.7338556 2.2814904 1.6143634 #>  [36] 0.2261083 2.1603232 2.0614949 2.2266758 1.9726484 1.8939718 1.8590425 #>  [43] 2.1122940 1.0266288 2.2899148 2.0001139 2.2696280 1.1425762 1.8437480 #>  [50] 1.2960753 0.9354456 2.1810083 0.3213871 1.0859118 1.0760938 0.8695952 #>  [57] 0.6928323 2.0152561 2.3024280 1.5612256 2.2571190 1.8835831 1.5722668 #>  [64] 1.9218629 1.9996474 2.2849652 1.9021439 2.1330371 0.5768307 2.2143324 #>  [71] 2.3005903 2.2313742 1.9132474 0.6324472 1.2426860 1.6216604 1.0566885 #>  [78] 2.1700193 0.6268517 1.3252982 1.7557286 2.3041119 2.1369220 1.1256808 #>  [85] 2.0452147 2.2706022 2.0058652 1.3053960 0.6486066 1.8293846 1.9926417 #>  [92] 2.1203136 2.2789298 2.0563792 0.5056378 2.0173575 1.0181820 2.2272335 #>  [99] 0.1097897 2.2036227  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 0.375 var(D) # Variance #> [1] 0.02604167 sd(D) # Standard Deviation #> [1] 0.1613743 skew(D) # Skewness #> [1] 0.3098387 kurt(D) # Excess Kurtosis #> [1] 0.04 entro(D) # Entropy #> [1] -0.4301508 finf(D) # Fisher Information Matrix #>            shape1      shape2 #> shape1  0.2617971 -0.13313701 #> shape2 -0.1331370  0.08818594  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 0.375  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] 38.82471 llbeta(x, a, b) #> [1] 38.82471  ebeta(x, type = \"mle\") #> $shape1 #> [1] 2.726376 #>  #> $shape2 #> [1] 4.534167 #>  ebeta(x, type = \"me\") #> $shape1 #> [1] 2.728009 #>  #> $shape2 #> [1] 4.514866 #>  ebeta(x, type = \"same\") #> $shape1 #> [1] 2.721989 #>  #> $shape2 #> [1] 4.504902 #>   mle(D, x) #> $shape1 #> [1] 2.726376 #>  #> $shape2 #> [1] 4.534167 #>  me(D, x) #> $shape1 #> [1] 2.728009 #>  #> $shape2 #> [1] 4.514866 #>  same(D, x) #> $shape1 #> [1] 2.721989 #>  #> $shape2 #> [1] 4.504902 #>  e(D, x, type = \"mle\") #> $shape1 #> [1] 2.726376 #>  #> $shape2 #> [1] 4.534167 #>   mle(\"beta\", x) # the distr argument can be a character #> $shape1 #> [1] 2.726376 #>  #> $shape2 #> [1] 4.534167 #>   # ------------------ # Estimator Variance # ------------------  vbeta(a, b, type = \"mle\") #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 vbeta(a, b, type = \"me\") #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 vbeta(a, b, type = \"same\") #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  avar_mle(D) #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 avar_me(D) #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 avar_same(D) #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  v(D, type = \"mle\") #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039"},{"path":"https://thechibo.github.io/joker/reference/Exp.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential Distribution — Exp","title":"Exponential Distribution — Exp","text":"Exponential distribution continuous probability distribution often used model time independent events occur constant average rate. defined rate parameter \\(\\lambda > 0\\).","code":""},{"path":"https://thechibo.github.io/joker/reference/Exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential Distribution — Exp","text":"","code":"Exp(rate = 1)  # S4 method for class 'Exp,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Exp,numeric' p(distr, q, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Exp,numeric' qn(distr, p, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Exp,numeric' r(distr, n)  # S4 method for class 'Exp' mean(x)  # S4 method for class 'Exp' median(x)  # S4 method for class 'Exp' mode(x)  # S4 method for class 'Exp' var(x)  # S4 method for class 'Exp' sd(x)  # S4 method for class 'Exp' skew(x)  # S4 method for class 'Exp' kurt(x)  # S4 method for class 'Exp' entro(x)  # S4 method for class 'Exp' finf(x)  llexp(x, rate)  # S4 method for class 'Exp,numeric' ll(distr, x)  eexp(x, type = \"mle\", ...)  # S4 method for class 'Exp,numeric' mle(distr, x, na.rm = FALSE)  # S4 method for class 'Exp,numeric' me(distr, x, na.rm = FALSE)  vexp(rate, type = \"mle\")  # S4 method for class 'Exp' avar_mle(distr)  # S4 method for class 'Exp' avar_me(distr)"},{"path":"https://thechibo.github.io/joker/reference/Exp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential Distribution — Exp","text":"rate numeric. distribution parameter. distr object class Exp. x density function, x numeric vector quantiles. moments functions, x object class Exp. log-likelihood estimation functions, x sample observations. log, log.p logical. logarithm probability returned? q numeric. Vector quantiles. lower.tail logical. TRUE (default), probabilities \\(P(X \\leq x)\\), otherwise \\(P(X > x)\\). p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required. type character, case ignored. estimator type (mle ). ... extra arguments. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Exp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential Distribution — Exp","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Exp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential Distribution — Exp","text":"probability density function (PDF) Exponential distribution given : $$ f(x; \\lambda) = \\lambda e^{-\\lambda x}, \\quad x \\geq 0 .$$","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Exp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential Distribution — Exp","text":"","code":"# ----------------------------------------------------- # Exp Distribution Example # -----------------------------------------------------  # Create the distribution rate <- 5 D <- Exp(rate)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 2, 10)) # density function #> [1] 1.115651e+00 2.269996e-04 9.643749e-22 p(D, c(0.3, 2, 10)) # distribution function #> [1] 0.7768698 0.9999546 1.0000000 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 0.1021651 0.3218876 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 1.89987690 2.36931267 2.87148233 2.74866636 1.81625942 2.14904160 #>   [7] 0.28175009 4.56760768 1.09349174 0.55779297 4.35602554 0.18890265 #>  [13] 4.62891545 3.88241279 3.74935436 4.79008384 0.02844234 2.61570046 #>  [19] 3.53960260 3.63514303 1.85420176 0.34136504 2.15088222 0.04922910 #>  [25] 4.10220503 1.70539679 4.23510894 0.51545035 0.32568537 4.26716539 #>  [31] 1.82615671 1.48345821 2.23857336 3.83841219 2.00453620 2.29161131 #>  [37] 1.51727683 1.46398022 2.60290035 1.53101548 2.67608246 1.41405854 #>  [43] 2.19931336 4.18380765 2.90573574 0.28884700 3.86703149 2.86690371 #>  [49] 2.07474056 2.81270867 3.62690085 0.83397951 1.70165990 3.94251708 #>  [55] 1.19258253 4.01383551 0.62372620 2.43040021 0.40834374 4.10935165 #>  [61] 1.22289564 3.74197009 1.35856446 3.50883604 1.55563954 0.71899625 #>  [67] 1.36363264 3.03567438 3.50887986 2.24864180 1.86893107 1.79055463 #>  [73] 1.23685773 4.31248100 2.69409546 1.32429995 0.90656930 0.51632727 #>  [79] 2.01382100 2.04640433 0.81883860 4.77134465 1.69830222 2.57596949 #>  [85] 2.50862141 2.49922833 1.24203905 4.40907816 4.78664006 3.93452419 #>  [91] 2.90532206 3.43348595 1.47234436 0.26083641 4.66876037 4.80286053 #>  [97] 3.07056132 3.51662543 2.99126895 1.80387736  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 0.2 median(D) # Median #> [1] 0.1386294 mode(D) # Mode #> [1] 0 var(D) # Variance #> [1] 0.04 sd(D) # Standard Deviation #> [1] 0.2 skew(D) # Skewness #> [1] 2 kurt(D) # Excess Kurtosis #> [1] 6 entro(D) # Entropy #> [1] -0.6094379 finf(D) # Fisher Information Matrix #> [1] 0.04  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 0.2  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] 59.8082 llexp(x, rate) #> [1] 59.8082  eexp(x, type = \"mle\") #> $rate #> [1] 4.943858 #>  eexp(x, type = \"me\") #> $rate #> [1] 4.943858 #>   mle(D, x) #> $rate #> [1] 4.943858 #>  me(D, x) #> $rate #> [1] 4.943858 #>  e(D, x, type = \"mle\") #> $rate #> [1] 4.943858 #>   mle(\"exp\", x) # the distr argument can be a character #> $rate #> [1] 4.943858 #>   # ------------------ # Estimator Variance # ------------------  vexp(rate, type = \"mle\") #> rate  #>   25  vexp(rate, type = \"me\") #> rate  #>   25   avar_mle(D) #> rate  #>   25  avar_me(D) #> rate  #>   25   v(D, type = \"mle\") #> rate  #>   25"},{"path":"https://thechibo.github.io/joker/reference/fd.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward Difference — fd","title":"Forward Difference — fd","text":"Calculates forward difference vector matrix.","code":""},{"path":"https://thechibo.github.io/joker/reference/fd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward Difference — fd","text":"","code":"fd(x)"},{"path":"https://thechibo.github.io/joker/reference/fd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward Difference — fd","text":"x numeric vector matrix.","code":""},{"path":"https://thechibo.github.io/joker/reference/fd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward Difference — fd","text":"atomic vector matrix dimensions x.","code":""},{"path":"https://thechibo.github.io/joker/reference/fd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forward Difference — fd","text":"function used internally Multigam distribution.","code":""},{"path":"https://thechibo.github.io/joker/reference/fd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward Difference — fd","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(1) x <- r(Multigam(1:3, 1), 4) fd(x) } # }"},{"path":"https://thechibo.github.io/joker/reference/Fisher.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisher Distribution — Fisher","title":"Fisher Distribution — Fisher","text":"Fisher (F) distribution absolute continuous probability distribution arises frequently analysis variance (ANOVA) hypothesis testing. defined two degrees freedom parameters \\(d_1 > 0\\) \\(d_2 > 0\\).","code":""},{"path":"https://thechibo.github.io/joker/reference/Fisher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fisher Distribution — Fisher","text":"","code":"Fisher(df1 = 1, df2 = 1)  # S4 method for class 'Fisher,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Fisher,numeric' p(distr, q, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Fisher,numeric' qn(distr, p, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Fisher,numeric' r(distr, n)  # S4 method for class 'Fisher' mean(x)  # S4 method for class 'Fisher' median(x)  # S4 method for class 'Fisher' mode(x)  # S4 method for class 'Fisher' var(x)  # S4 method for class 'Fisher' sd(x)  # S4 method for class 'Fisher' skew(x)  # S4 method for class 'Fisher' kurt(x)  # S4 method for class 'Fisher' entro(x)  llf(x, df1, df2)  # S4 method for class 'Fisher,numeric' ll(distr, x)"},{"path":"https://thechibo.github.io/joker/reference/Fisher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fisher Distribution — Fisher","text":"df1, df2 numeric. distribution degrees freedom parameters. distr object class Fisher. x density function, x numeric vector quantiles. moments functions, x object class Fisher. log-likelihood functions, x sample observations. log, log.p logical. logarithm probability returned? q numeric. Vector quantiles. lower.tail logical. TRUE (default), probabilities \\(P(X \\leq x)\\), otherwise \\(P(X > x)\\). p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required.","code":""},{"path":"https://thechibo.github.io/joker/reference/Fisher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fisher Distribution — Fisher","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Fisher.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fisher Distribution — Fisher","text":"probability density function (PDF) F-distribution given : $$ f(x; d_1, d_2) = \\frac{\\sqrt{\\left(\\frac{d_1 x}{d_1 x + d_2}\\right)^{d_1} \\left(\\frac{d_2}{d_1 x + d_2}\\right)^{d_2}}}{x B(d_1/2, d_2/2)}, \\quad x > 0 .$$","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Fisher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fisher Distribution — Fisher","text":"","code":"# ----------------------------------------------------- # Fisher Distribution Example # -----------------------------------------------------  # Create the distribution df1 <- 14 ; df2 <- 20 D <- Fisher(df1, df2)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 2, 10)) # density function #> [1] 1.881857e-01 1.451440e-01 2.928738e-06 p(D, c(0.3, 2, 10)) # distribution function #> [1] 0.01256583 0.92359588 0.99999638 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 0.8676318 1.4961699 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 0.50410625 0.43598010 0.05783994 0.49138451 0.11114179 0.27445372 #>   [7] 0.65851612 0.52481527 0.83115002 0.80464500 0.88235902 0.86605381 #>  [13] 0.65564316 0.55611627 0.78462865 0.27846456 0.50160315 0.75105185 #>  [19] 0.88317653 0.89965395 0.52350916 0.32816152 0.83145608 0.88019032 #>  [25] 0.29866335 0.83062933 0.56256621 0.87980550 0.87626494 0.39679180 #>  [31] 0.43580665 0.38359265 0.67139442 0.82187365 0.83805235 0.90177703 #>  [37] 0.59072685 0.89510540 0.41067246 0.64469869 0.63658505 0.86921164 #>  [43] 0.35140882 0.80408232 0.87328420 0.86568503 0.90090492 0.89216623 #>  [49] 0.83552855 0.17022810 0.81192302 0.90014363 0.81342169 0.89658161 #>  [55] 0.75599087 0.88324463 0.61950167 0.68920316 0.74003765 0.46443344 #>  [61] 0.79191007 0.12706952 0.89417812 0.76989275 0.77780084 0.86105316 #>  [67] 0.32021668 0.88398724 0.85312747 0.48132007 0.57261040 0.64794971 #>  [73] 0.13994524 0.57530144 0.38867046 0.79208293 0.89881213 0.75898254 #>  [79] 0.81741636 0.87156977 0.74841887 0.29435389 0.68223119 0.79292539 #>  [85] 0.81053348 0.80723222 0.90198989 0.66787152 0.89822277 0.21541686 #>  [91] 0.84341915 0.87563657 0.44269213 0.29651848 0.30842226 0.73597629 #>  [97] 0.38326217 0.88868038 0.88198966 0.20699983  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 1.111111 median(D) # Median #> [1] 0.9854796 mode(D) # Mode #> [1] 12 var(D) # Variance #> [1] 0.3527337 sd(D) # Standard Deviation #> [1] 0.5939139 skew(D) # Skewness #> [1] 1.756288 kurt(D) # Excess Kurtosis #> [1] 184909824 entro(D) # Entropy #> [1] -1.237507  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 1.111111  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] -53.07676 llf(x, df1, df2) #> [1] -53.07676"},{"path":"https://thechibo.github.io/joker/reference/functionals.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution Functionals — functionals","title":"Distribution Functionals — functionals","text":"collection S4 classes provide flexible structured way work probability distributions.","code":""},{"path":"https://thechibo.github.io/joker/reference/functionals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution Functionals — functionals","text":"","code":"# S4 method for class 'Distribution,missing' d(distr, x, ...)  # S4 method for class 'Distribution,missing' p(distr, q, ...)  # S4 method for class 'Distribution,missing' qn(distr, p, ...)  # S4 method for class 'Distribution,missing' r(distr, n, ...)  # S4 method for class 'Distribution,missing' ll(distr, x, ...)  # S4 method for class 'Distribution,missing' mle(distr, x, ...)  # S4 method for class 'Distribution,missing' me(distr, x, ...)  # S4 method for class 'Distribution,missing' same(distr, x, ...)"},{"path":"https://thechibo.github.io/joker/reference/functionals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution Functionals — functionals","text":"distr Distribution object. x, q, p, n missing. Arguments supplied. ... extra arguments.","code":""},{"path":"https://thechibo.github.io/joker/reference/functionals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution Functionals — functionals","text":"supplied one argument, d(), p(), q(), r() ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively.","code":""},{"path":"https://thechibo.github.io/joker/reference/functionals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distribution Functionals — functionals","text":"x, q, p, n missing, methods return function takes input missing argument, allowing user work function object . See examples.","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/functionals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution Functionals — functionals","text":"","code":"# ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  # Create the distribution a <- 3 b <- 5 D <- Beta(a, b)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 0.8, 0.5)) # density function #> [1] 2.268945 0.107520 1.640625 p(D, c(0.3, 0.8, 0.5)) # distribution function #> [1] 0.3529305 0.9953280 0.7734375 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 0.3205858 0.5167578 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 1.832306349 0.664783925 2.197836117 2.218911907 1.969146016 2.100071416 #>   [7] 2.002729249 1.567498784 1.006987090 1.220802760 0.839953936 2.081429386 #>  [13] 0.357641569 2.186707808 2.064837424 2.168532431 2.271240756 1.414795380 #>  [19] 2.301749794 2.016197381 2.158672532 1.281156142 2.243814645 0.001106043 #>  [25] 1.616132177 2.271547070 2.065361832 2.304458713 1.900562965 2.211118210 #>  [31] 0.518508091 1.138651488 0.618925261 1.992796136 1.509465489 1.416017519 #>  [37] 0.900226269 0.719170924 2.262744403 2.100773856 1.050960272 2.303615168 #>  [43] 2.281784759 2.139293477 0.737308701 1.994982937 2.291699505 2.235898890 #>  [49] 1.429123553 1.767726487 0.790154504 1.974435112 1.715618581 1.782390720 #>  [55] 2.015090745 2.201406892 1.807148295 0.123923150 1.986468407 2.249127528 #>  [61] 1.982668633 1.025986840 1.519965865 2.033383298 2.297135048 2.299953386 #>  [67] 1.704568454 2.277863263 2.267235810 2.082505612 1.447012812 0.790179893 #>  [73] 1.985726134 2.195537468 1.007736926 1.720512128 2.293591188 1.789591679 #>  [79] 1.408189077 2.279112906 1.551205012 1.306998689 1.655381663 2.103332862 #>  [85] 2.221211403 1.652859132 1.240611670 1.558916553 2.091652743 1.695053107 #>  [91] 1.609270564 1.250288491 2.283137806 1.372333862 1.512817539 2.303696296 #>  [97] 2.218488985 2.237738410 1.035968651 0.653927385  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 0.375 var(D) # Variance #> [1] 0.02604167 sd(D) # Standard Deviation #> [1] 0.1613743 skew(D) # Skewness #> [1] 0.3098387 kurt(D) # Excess Kurtosis #> [1] 0.04 entro(D) # Entropy #> [1] -0.4301508 finf(D) # Fisher Information Matrix #>            shape1      shape2 #> shape1  0.2617971 -0.13313701 #> shape2 -0.1331370  0.08818594  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 0.375  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] 39.04561 llbeta(x, a, b) #> [1] 39.04561  ebeta(x, type = \"mle\") #> $shape1 #> [1] 2.865864 #>  #> $shape2 #> [1] 4.575531 #>  ebeta(x, type = \"me\") #> $shape1 #> [1] 2.886968 #>  #> $shape2 #> [1] 4.680023 #>  ebeta(x, type = \"same\") #> $shape1 #> [1] 2.867425 #>  #> $shape2 #> [1] 4.648342 #>   mle(D, x) #> $shape1 #> [1] 2.865864 #>  #> $shape2 #> [1] 4.575531 #>  me(D, x) #> $shape1 #> [1] 2.886968 #>  #> $shape2 #> [1] 4.680023 #>  same(D, x) #> $shape1 #> [1] 2.867425 #>  #> $shape2 #> [1] 4.648342 #>  e(D, x, type = \"mle\") #> $shape1 #> [1] 2.865864 #>  #> $shape2 #> [1] 4.575531 #>   mle(\"beta\", x) # the distr argument can be a character #> $shape1 #> [1] 2.865864 #>  #> $shape2 #> [1] 4.575531 #>   # ------------------ # Estimator Variance # ------------------  vbeta(a, b, type = \"mle\") #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 vbeta(a, b, type = \"me\") #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 vbeta(a, b, type = \"same\") #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  avar_mle(D) #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 avar_me(D) #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 avar_same(D) #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  v(D, type = \"mle\") #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039"},{"path":"https://thechibo.github.io/joker/reference/Gam.html","id":null,"dir":"Reference","previous_headings":"","what":"Gamma Distribution — Gam","title":"Gamma Distribution — Gam","text":"Gamma distribution absolute continuous probability distribution two parameters: shape \\(\\alpha > 0\\) scale \\(\\beta > 0\\).","code":""},{"path":"https://thechibo.github.io/joker/reference/Gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gamma Distribution — Gam","text":"","code":"Gam(shape = 1, scale = 1)  # S4 method for class 'Gam,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Gam,numeric' p(distr, q, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Gam,numeric' qn(distr, p, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Gam,numeric' r(distr, n)  # S4 method for class 'Gam' mean(x)  # S4 method for class 'Gam' median(x)  # S4 method for class 'Gam' mode(x)  # S4 method for class 'Gam' var(x)  # S4 method for class 'Gam' sd(x)  # S4 method for class 'Gam' skew(x)  # S4 method for class 'Gam' kurt(x)  # S4 method for class 'Gam' entro(x)  # S4 method for class 'Gam' finf(x)  llgamma(x, shape, scale)  # S4 method for class 'Gam,numeric' ll(distr, x)  egamma(x, type = \"mle\", ...)  # S4 method for class 'Gam,numeric' mle(   distr,   x,   par0 = \"same\",   method = \"L-BFGS-B\",   lower = 1e-05,   upper = Inf,   na.rm = FALSE )  # S4 method for class 'Gam,numeric' me(distr, x, na.rm = FALSE)  # S4 method for class 'Gam,numeric' same(distr, x, na.rm = FALSE)  vgamma(shape, scale, type = \"mle\")  # S4 method for class 'Gam' avar_mle(distr)  # S4 method for class 'Gam' avar_me(distr)  # S4 method for class 'Gam' avar_same(distr)"},{"path":"https://thechibo.github.io/joker/reference/Gam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gamma Distribution — Gam","text":"shape, scale numeric. non-negative distribution parameters. distr object class Gam. x density function, x numeric vector quantiles. moments functions, x object class Gam. log-likelihood estimation functions, x sample observations. log, log.p logical. logarithm probability returned? q numeric. Vector quantiles. lower.tail logical. TRUE (default), probabilities \\(P(X \\leq x)\\), otherwise \\(P(X > x)\\). p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required. type character, case ignored. estimator type (mle, , ). ... extra arguments. par0, method, lower, upper arguments passed optim mle optimization. See Details. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Gam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gamma Distribution — Gam","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Gam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gamma Distribution — Gam","text":"probability density function (PDF) Gamma distribution given : $$ f(x; \\alpha, \\beta) = \\frac{\\beta^{-\\alpha} x^{\\alpha-1} e^{-x/\\beta}}{\\Gamma(\\alpha)}, \\quad x > 0. $$ MLE gamma distribution parameters available closed form approximated numerically. done optim(). optimization can performed shape parameter \\(\\alpha\\(0,+\\infty)\\). default method used L-BFGS-B method lower bound 1e-5 upper bound Inf. par0 argument can either numeric (satisfying lower <= par0 <= upper) character specifying closed-form estimator used initialization algorithm (\"\" \"\" - default value).","code":""},{"path":"https://thechibo.github.io/joker/reference/Gam.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gamma Distribution — Gam","text":"Wiens, D. P., Cheng, J., & Beaulieu, N. C. (2003). class method moments estimators two-parameter gamma family. Pakistan Journal Statistics, 19(1), 129-141. Ye, Z. S., & Chen, N. (2017). Closed-form estimators gamma distribution derived likelihood equations. American Statistician, 71(2), 177-181. Tamae, H., Irie, K. & Kubokawa, T. (2020), score-adjusted approach closed-form estimators gamma beta distributions, Japanese Journal Statistics Data Science 3, 543–561. Papadatos, N. (2022), point estimators gamma beta distributions, arXiv preprint arXiv:2205.10799.","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Gam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gamma Distribution — Gam","text":"","code":"# ----------------------------------------------------- # Gamma Distribution Example # -----------------------------------------------------  # Create the distribution a <- 3 ; b <- 5 D <- Gam(a, b)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 2, 10)) # density function #> [1] 0.0003390352 0.0107251207 0.0541341133 p(D, c(0.3, 2, 10)) # distribution function #> [1] 3.441824e-05 7.926332e-03 3.233236e-01 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 11.42538 21.39515 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 0.035895119 0.053743332 0.039414356 0.014069829 0.019256917 0.046398545 #>   [7] 0.054101078 0.054131386 0.007247814 0.007983775 0.029427730 0.038404705 #>  [13] 0.051540371 0.054080143 0.001593671 0.050292018 0.049361212 0.042934341 #>  [19] 0.029186593 0.007249341 0.042111499 0.053804345 0.035352916 0.020472016 #>  [25] 0.017284996 0.053192521 0.048084602 0.020601132 0.051059421 0.050945937 #>  [31] 0.047564047 0.050177120 0.028617257 0.054035666 0.047765225 0.049933452 #>  [37] 0.037612929 0.053398545 0.048667246 0.044698009 0.038693718 0.039031014 #>  [43] 0.041049829 0.052849212 0.028021300 0.025704862 0.046565777 0.052298014 #>  [49] 0.034296820 0.046681135 0.052304951 0.048938425 0.046322748 0.026345973 #>  [55] 0.051484673 0.029348053 0.052094877 0.030077529 0.003493075 0.051987391 #>  [61] 0.022624384 0.050663301 0.019786741 0.043953325 0.046104069 0.044957171 #>  [67] 0.053287657 0.028183125 0.053756380 0.028061800 0.047933534 0.049107138 #>  [73] 0.043852622 0.052547558 0.019640593 0.035400255 0.038365867 0.047724512 #>  [79] 0.032135621 0.053975057 0.054004620 0.036656794 0.041618440 0.009294019 #>  [85] 0.003494763 0.050843067 0.046632274 0.052332642 0.049976857 0.050270826 #>  [91] 0.028996493 0.001805018 0.049599480 0.053183519 0.052404912 0.007006395 #>  [97] 0.052995803 0.038592712 0.053301933 0.037254951  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 15 median(D) # Median #> [1] 13.3703 mode(D) # Mode #> [1] 0.4 var(D) # Variance #> [1] 75 sd(D) # Standard Deviation #> [1] 8.660254 skew(D) # Skewness #> [1] 1.154701 kurt(D) # Excess Kurtosis #> [1] 2 entro(D) # Entropy #> [1] 3.457016 finf(D) # Fisher Information Matrix #>           shape scale #> shape 0.3949341  0.20 #> scale 0.2000000  0.12  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 15  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] -339.6007 llgamma(x, a, b) #> [1] -339.6007  egamma(x, type = \"mle\") #> $shape #> [1] 3.914281 #>  #> $scale #> [1] 3.923344 #>  egamma(x, type = \"me\") #> $shape #> [1] 3.646524 #>  #> $scale #> [1] 4.211428 #>  egamma(x, type = \"same\") #> $shape #> [1] 3.846913 #>  #> $scale #> [1] 3.992051 #>   mle(D, x) #> $shape #> [1] 3.914281 #>  #> $scale #> [1] 3.923344 #>  me(D, x) #> $shape #> [1] 3.646524 #>  #> $scale #> [1] 4.211428 #>  same(D, x) #> $shape #> [1] 3.846913 #>  #> $scale #> [1] 3.992051 #>  e(D, x, type = \"mle\") #> $shape #> [1] 3.914281 #>  #> $scale #> [1] 3.923344 #>   mle(\"gam\", x) # the distr argument can be a character #> $shape #> [1] 3.914281 #>  #> $scale #> [1] 3.923344 #>   # ------------------ # Estimator Variance # ------------------  vgamma(a, b, type = \"mle\") #>           shape     scale #> shape  16.23357 -27.05595 #> scale -27.05595  53.42659 vgamma(a, b, type = \"me\") #>       shape scale #> shape    24   -40 #> scale   -40    75 vgamma(a, b, type = \"same\") #>           shape     scale #> shape  16.66322 -27.77203 #> scale -27.77203  54.62006  avar_mle(D) #>           shape     scale #> shape  16.23357 -27.05595 #> scale -27.05595  53.42659 avar_me(D) #>       shape scale #> shape    24   -40 #> scale   -40    75 avar_same(D) #>           shape     scale #> shape  16.66322 -27.77203 #> scale -27.77203  54.62006  v(D, type = \"mle\") #>           shape     scale #> shape  16.23357 -27.05595 #> scale -27.05595  53.42659"},{"path":"https://thechibo.github.io/joker/reference/Geom.html","id":null,"dir":"Reference","previous_headings":"","what":"Geometric Distribution — Geom","title":"Geometric Distribution — Geom","text":"Geometric distribution discrete probability distribution models number failures first success sequence independent Bernoulli trials, success probability \\(0 < p \\leq 1\\).","code":""},{"path":"https://thechibo.github.io/joker/reference/Geom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geometric Distribution — Geom","text":"","code":"Geom(prob = 0.5)  # S4 method for class 'Geom,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Geom,numeric' p(distr, q, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Geom,numeric' qn(distr, p, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Geom,numeric' r(distr, n)  # S4 method for class 'Geom' mean(x)  # S4 method for class 'Geom' median(x)  # S4 method for class 'Geom' mode(x)  # S4 method for class 'Geom' var(x)  # S4 method for class 'Geom' sd(x)  # S4 method for class 'Geom' skew(x)  # S4 method for class 'Geom' kurt(x)  # S4 method for class 'Geom' entro(x)  # S4 method for class 'Geom' finf(x)  llgeom(x, prob)  # S4 method for class 'Geom,numeric' ll(distr, x)  egeom(x, type = \"mle\", ...)  # S4 method for class 'Geom,numeric' mle(distr, x, na.rm = FALSE)  # S4 method for class 'Geom,numeric' me(distr, x, na.rm = FALSE)  vgeom(prob, type = \"mle\")  # S4 method for class 'Geom' avar_mle(distr)  # S4 method for class 'Geom' avar_me(distr)"},{"path":"https://thechibo.github.io/joker/reference/Geom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geometric Distribution — Geom","text":"prob numeric. Probability success. distr object class Geom. x density function, x numeric vector quantiles. moments functions, x object class Geom. log-likelihood estimation functions, x sample observations. log, log.p logical. logarithm probability returned? q numeric. Vector quantiles. lower.tail logical. TRUE (default), probabilities \\(P(X \\leq x)\\), otherwise \\(P(X > x)\\). p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required. type character, case ignored. estimator type (mle ). ... extra arguments. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Geom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geometric Distribution — Geom","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Geom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geometric Distribution — Geom","text":"probability mass function (PMF) Geometric distribution : $$ P(X = k) = (1 - p)^k p, \\quad k \\\\mathbb{N}_0.$$","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Geom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geometric Distribution — Geom","text":"","code":"# ----------------------------------------------------- # Geom Distribution Example # -----------------------------------------------------  # Create the distribution p <- 0.4 D <- Geom(p)  # ------------------ # dpqr Functions # ------------------  d(D, 0:4) # density function #> [1] 0.40000 0.24000 0.14400 0.08640 0.05184 p(D, 0:4) # distribution function #> [1] 0.40000 0.64000 0.78400 0.87040 0.92224 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 0 3 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 0.03110400 0.40000000 0.24000000 0.24000000 0.05184000 0.24000000 #>   [7] 0.24000000 0.40000000 0.14400000 0.24000000 0.40000000 0.40000000 #>  [13] 0.40000000 0.01866240 0.03110400 0.08640000 0.40000000 0.40000000 #>  [19] 0.40000000 0.40000000 0.14400000 0.24000000 0.40000000 0.05184000 #>  [25] 0.05184000 0.40000000 0.14400000 0.24000000 0.40000000 0.40000000 #>  [31] 0.40000000 0.14400000 0.24000000 0.05184000 0.01866240 0.14400000 #>  [37] 0.24000000 0.40000000 0.08640000 0.24000000 0.40000000 0.14400000 #>  [43] 0.40000000 0.24000000 0.01119744 0.40000000 0.40000000 0.05184000 #>  [49] 0.14400000 0.40000000 0.40000000 0.40000000 0.40000000 0.40000000 #>  [55] 0.14400000 0.24000000 0.40000000 0.40000000 0.24000000 0.08640000 #>  [61] 0.40000000 0.40000000 0.40000000 0.14400000 0.40000000 0.40000000 #>  [67] 0.40000000 0.08640000 0.08640000 0.14400000 0.05184000 0.24000000 #>  [73] 0.40000000 0.40000000 0.40000000 0.08640000 0.14400000 0.40000000 #>  [79] 0.24000000 0.24000000 0.40000000 0.24000000 0.01866240 0.40000000 #>  [85] 0.14400000 0.14400000 0.24000000 0.08640000 0.05184000 0.24000000 #>  [91] 0.05184000 0.14400000 0.40000000 0.40000000 0.24000000 0.40000000 #>  [97] 0.40000000 0.40000000 0.05184000 0.08640000  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 1.5 median(D) # Median #> [1] 1 mode(D) # Mode #> [1] 0 var(D) # Variance #> [1] 3.75 sd(D) # Standard Deviation #> [1] 1.936492 skew(D) # Skewness #> [1] 2.065591 kurt(D) # Excess Kurtosis #> [1] 6.266667 entro(D) # Entropy #> [1] 1.682529 finf(D) # Fisher Information Matrix #> [1] 10.41667  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 1.5  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] -164.6771 llgeom(x, p) #> [1] -164.6771  egeom(x, type = \"mle\") #> $prob #> [1] 0.4115226 #>  egeom(x, type = \"me\") #> $prob #> [1] 0.4115226 #>   mle(D, x) #> $prob #> [1] 0.4115226 #>  me(D, x) #> $prob #> [1] 0.4115226 #>  e(D, x, type = \"mle\") #> $prob #> [1] 0.4115226 #>   mle(\"geom\", x) # the distr argument can be a character #> $prob #> [1] 0.4115226 #>   # ------------------ # Estimator Variance # ------------------  vgeom(p, type = \"mle\") #>  prob  #> 0.096  vgeom(p, type = \"me\") #>  prob  #> 0.096   avar_mle(D) #>  prob  #> 0.096  avar_me(D) #>  prob  #> 0.096   v(D, type = \"mle\") #>  prob  #> 0.096"},{"path":"https://thechibo.github.io/joker/reference/idigamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse Digamma Function — idigamma","title":"Inverse Digamma Function — idigamma","text":"inverse digamma function, .e. derivative log-gamma function.","code":""},{"path":"https://thechibo.github.io/joker/reference/idigamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse Digamma Function — idigamma","text":"","code":"idigamma(x, ...)"},{"path":"https://thechibo.github.io/joker/reference/idigamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse Digamma Function — idigamma","text":"x numeric. point evaluate function. ... extra arguments passed optim().","code":""},{"path":"https://thechibo.github.io/joker/reference/idigamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse Digamma Function — idigamma","text":"numeric. evaluated function.","code":""},{"path":"https://thechibo.github.io/joker/reference/idigamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverse Digamma Function — idigamma","text":"idigamma() function implements inverse digamma function \\(\\psi\\). numerical approximation based Brent optimization algorithm. Specifically, idigamma() makes call optim() order solve equation \\(\\psi(x) = y\\); accurately, find minimum \\(f(x) = \\log\\Gamma(x) - xy\\), whose derivative \\(f'(x) = \\psi(x) - y\\). optimization restricted within tight bounds derived Batir (2017). function vectorized.","code":""},{"path":"https://thechibo.github.io/joker/reference/idigamma.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Inverse Digamma Function — idigamma","text":"Necdet Batir (2017), INEQUALITIES INVERSES POLYGAMMA FUNCTIONS https://arxiv.org/pdf/1705.06547 Oikonomidis, . & Trevezas, S. (2023), Moment-Type Estimators Dirichlet Multivariate Gamma Distributions, arXiv, https://arxiv.org/abs/2311.15025","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/idigamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse Digamma Function — idigamma","text":"","code":"if (FALSE) { # \\dontrun{ idigamma(2) } # }"},{"path":"https://thechibo.github.io/joker/reference/inv2x2.html","id":null,"dir":"Reference","previous_headings":"","what":"2x2 Inverse Matrix — inv2x2","title":"2x2 Inverse Matrix — inv2x2","text":"Calculates inverse 2x2 matrix.","code":""},{"path":"https://thechibo.github.io/joker/reference/inv2x2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2x2 Inverse Matrix — inv2x2","text":"","code":"inv2x2(x)"},{"path":"https://thechibo.github.io/joker/reference/inv2x2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2x2 Inverse Matrix — inv2x2","text":"x 2x2 matrix.","code":""},{"path":"https://thechibo.github.io/joker/reference/inv2x2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2x2 Inverse Matrix — inv2x2","text":"2x2 matrix, inverse x","code":""},{"path":"https://thechibo.github.io/joker/reference/inv2x2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2x2 Inverse Matrix — inv2x2","text":"","code":"if (FALSE) { # \\dontrun{ x <- matrix(1:4, nrow = 2, ncol = 2) inv2x2(x) } # }"},{"path":"https://thechibo.github.io/joker/reference/isit.html","id":null,"dir":"Reference","previous_headings":"","what":"Is it? — isit","title":"Is it? — isit","text":"set functions check whether object desired characteristics.","code":""},{"path":"https://thechibo.github.io/joker/reference/isit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is it? — isit","text":"","code":"is_whole(x, tol = .Machine$double.eps^0.5)  is_atvec(x)  is_numatvec(x)  is_nummat(x)  is_numarray(x)  is_symmetric(x)  is_pd(x)  is_pos(x)  is_integer(x)  is_natural(x)"},{"path":"https://thechibo.github.io/joker/reference/isit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is it? — isit","text":"x numeric vector matrix. tol numeric. tolerance numeric considered whole number.","code":""},{"path":"https://thechibo.github.io/joker/reference/isit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is it? — isit","text":"logical. TRUE FALSE, depending whether object satisfies checks define characteristic.","code":""},{"path":"https://thechibo.github.io/joker/reference/isit.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Is it? — isit","text":"is_whole(): object integer mathematical sense? is_atvec(): object atomic vector (matrix array)? is_numatvec(): object numeric atomic vector? is_nummat(): object numeric atomic matrix? is_numarray(): object numeric atomic array? is_symmetric(): object symmetric matrix? is_pd(): object positive definite matrix? is_pos(): elements finite positive? is_integer(): object integer mathematical sense? is_natural(): object natural number mathematical sense?","code":""},{"path":"https://thechibo.github.io/joker/reference/isit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is it? — isit","text":"","code":"if (FALSE) { # \\dontrun{ x<- matrix(1:9, nrow = 3, ncol = 3) is_symmetric(x) is_pd(x) is_pos(x) is_integer(x) is_natural(x) } # }"},{"path":"https://thechibo.github.io/joker/reference/joker-package.html","id":null,"dir":"Reference","previous_headings":"","what":"joker: Probability Distributions and Parameter Estimation — joker-package","title":"joker: Probability Distributions and Parameter Estimation — joker-package","text":"Implements S4 distribution system estimation methods parameters common distribution families. common d, p, q, r function family distribution enriched ll, e, v counterparts, computing log-likelihood, performing estimation, calculating asymptotic variance - covariance matrix, respectively. Parameter estimation performed analytically whenever possible.","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/joker-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"joker: Probability Distributions and Parameter Estimation — joker-package","text":"Maintainer: Ioannis Oikonomidis goikon@math.uoa.gr (ORCID) Authors: Samis Trevezas strevezas@math.uoa.gr (ORCID) [thesis advisor]","code":""},{"path":"https://thechibo.github.io/joker/reference/Laplace.html","id":null,"dir":"Reference","previous_headings":"","what":"Laplace Distribution — Laplace","title":"Laplace Distribution — Laplace","text":"Laplace distribution, also known double exponential distribution, continuous probability distribution often used model data sharp peaks heavy tails. parameterized location parameter \\(\\mu\\) scale parameter \\(b > 0\\).","code":""},{"path":"https://thechibo.github.io/joker/reference/Laplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Laplace Distribution — Laplace","text":"","code":"Laplace(mu = 0, sigma = 1)  dlaplace(x, mu, sigma, log = FALSE)  plaplace(q, mu, sigma, lower.tail = TRUE, log.p = FALSE)  qlaplace(p, mu, sigma, lower.tail = TRUE, log.p = FALSE)  rlaplace(n, mu, sigma)  # S4 method for class 'Laplace,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Laplace,numeric' p(distr, q, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Laplace,numeric' qn(distr, p, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Laplace,numeric' r(distr, n)  # S4 method for class 'Laplace' mean(x)  # S4 method for class 'Laplace' median(x)  # S4 method for class 'Laplace' mode(x)  # S4 method for class 'Laplace' var(x)  # S4 method for class 'Laplace' sd(x)  # S4 method for class 'Laplace' skew(x)  # S4 method for class 'Laplace' kurt(x)  # S4 method for class 'Laplace' entro(x)  # S4 method for class 'Laplace' finf(x)  lllaplace(x, mu, sigma)  # S4 method for class 'Laplace,numeric' ll(distr, x)  elaplace(x, type = \"mle\", ...)  # S4 method for class 'Laplace,numeric' mle(distr, x, na.rm = FALSE)  # S4 method for class 'Laplace,numeric' me(distr, x, na.rm = FALSE)  vlaplace(mu, sigma, type = \"mle\")  # S4 method for class 'Laplace' avar_mle(distr)  # S4 method for class 'Laplace' avar_me(distr)"},{"path":"https://thechibo.github.io/joker/reference/Laplace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Laplace Distribution — Laplace","text":"mu, sigma numeric. distribution parameters. x density function, x numeric vector quantiles. moments functions, x object class Laplace. log-likelihood estimation functions, x sample observations. log, log.p logical. logarithm probability returned? q numeric. Vector quantiles. lower.tail logical. TRUE (default), probabilities \\(P(X \\leq x)\\), otherwise \\(P(X > x)\\). p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required. distr object class Laplace. type character, case ignored. estimator type (mle ). ... extra arguments. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Laplace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Laplace Distribution — Laplace","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Laplace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Laplace Distribution — Laplace","text":"probability density function (PDF) Laplace distribution : $$ f(x; \\mu, b) = \\frac{1}{2b} \\exp\\left(-\\frac{|x - \\mu|}{b}\\right) .$$","code":""},{"path":"https://thechibo.github.io/joker/reference/Laplace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Laplace Distribution — Laplace","text":"","code":"# ----------------------------------------------------- # Laplace Distribution Example # -----------------------------------------------------  # Create the distribution m <- 3 ; s <- 5 D <- Laplace(m, s)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 2, 10)) # density function #> [1] 0.05827483 0.08187308 0.02465970 p(D, c(0.3, 2, 10)) # distribution function #> [1] 0.2913741 0.4093654 0.8767015 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 1.884282 7.581454 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 0.0255049011 0.0411834040 0.0462429105 0.0465894662 0.0415778861 #>   [6] 0.0568282165 0.0681336696 0.0926202989 0.0971288137 0.0039095983 #>  [11] 0.0122019484 0.0969991081 0.0364322510 0.0830665678 0.0050211357 #>  [16] 0.0500123026 0.0663597172 0.0716630141 0.0643986045 0.0450556273 #>  [21] 0.0664329885 0.0381311629 0.0798682086 0.0306833740 0.0112360638 #>  [26] 0.0111551880 0.0900457788 0.0189437140 0.0939240431 0.0843399497 #>  [31] 0.0154120931 0.0970061188 0.0414377373 0.0358009313 0.0643595795 #>  [36] 0.0426303986 0.0065052702 0.0041909611 0.0533525518 0.0426843733 #>  [41] 0.0154930544 0.0568691757 0.0656494853 0.0721713971 0.0102965415 #>  [46] 0.0772819964 0.0209844087 0.0292521537 0.0088187437 0.0619484873 #>  [51] 0.0692220467 0.0524187332 0.0413714186 0.0832574055 0.0315657900 #>  [56] 0.0940235447 0.0001178064 0.0857673395 0.0039464330 0.0395695716 #>  [61] 0.0661753114 0.0056440283 0.0464413826 0.0823896556 0.0868047631 #>  [66] 0.0410684344 0.0553180110 0.0412130329 0.0653067930 0.0272090108 #>  [71] 0.0768721399 0.0870514842 0.0151375011 0.0270272243 0.0156571540 #>  [76] 0.0542485144 0.0222024417 0.0543644589 0.0216261976 0.0109751517 #>  [81] 0.0123335455 0.0873977414 0.0317832441 0.0721013897 0.0445756467 #>  [86] 0.0492795968 0.0139500877 0.0492574904 0.0641078407 0.0913747413 #>  [91] 0.0609337283 0.0519808882 0.0925293788 0.0399075269 0.0768249620 #>  [96] 0.0303843228 0.0987945568 0.0730543641 0.0534809090 0.0792518551  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 3 median(D) # Median #> [1] 3 mode(D) # Mode #> [1] 3 var(D) # Variance #> [1] 50 sd(D) # Standard Deviation #> [1] 7.071068 skew(D) # Skewness #> [1] 0 kurt(D) # Excess Kurtosis #> [1] 6 entro(D) # Entropy #> [1] 3.302585 finf(D) # Fisher Information Matrix #>       mu sigma #> mu     1   0.0 #> sigma  0   0.2  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 3  # ------------------ # Point Estimation # ------------------  elaplace(x, type = \"mle\") #> $mu #> [1] 2.954329 #>  #> $sigma #> [1] 4.948933 #>  elaplace(x, type = \"me\") #> $mu #> [1] 2.954329 #>  #> $sigma #> [1] 4.948933 #>   mle(D, x) #> $mu #> [1] 2.954329 #>  #> $sigma #> [1] 4.948933 #>  me(D, x) #> $mu #> [1] 2.954329 #>  #> $sigma #> [1] 4.948933 #>  e(D, x, type = \"mle\") #> $mu #> [1] 2.954329 #>  #> $sigma #> [1] 4.948933 #>   mle(\"laplace\", x) # the distr argument can be a character #> $mu #> [1] 2.954329 #>  #> $sigma #> [1] 4.948933 #>   # ------------------ # Estimator Variance # ------------------  vlaplace(m, s, type = \"mle\") #>       mu sigma #> mu     1     0 #> sigma  0     5 vlaplace(m, s, type = \"me\") #>       mu sigma #> mu     1     0 #> sigma  0     5  avar_mle(D) #>       mu sigma #> mu     1     0 #> sigma  0     5 avar_me(D) #>       mu sigma #> mu     1     0 #> sigma  0     5  v(D, type = \"mle\") #>       mu sigma #> mu     1     0 #> sigma  0     5"},{"path":"https://thechibo.github.io/joker/reference/LargeMetrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Large Sample Metrics — LargeMetrics","title":"Large Sample Metrics — LargeMetrics","text":"function calculates asymptotic variance - covariance matrix characterizing large sample (asymptotic) behavior estimator. function evaluates metrics function single parameter, keeping ones constant. See Details.","code":""},{"path":"https://thechibo.github.io/joker/reference/LargeMetrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Large Sample Metrics — LargeMetrics","text":"","code":"LargeMetrics(D, est, df)  large_metrics(D, prm, est = c(\"same\", \"me\", \"mle\"), ...)"},{"path":"https://thechibo.github.io/joker/reference/LargeMetrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Large Sample Metrics — LargeMetrics","text":"D subclass Distribution. distribution family interest. est character. estimator interest. Can vector. df data.frame. data.frame columns named \"Row\", \"Col\", \"Parameter\", \"Estimator\", \"Value\". prm list containing three elements (name, pos, val). See Details. ... extra arguments.","code":""},{"path":"https://thechibo.github.io/joker/reference/LargeMetrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Large Sample Metrics — LargeMetrics","text":"object class LargeMetrics slots D, est, df.","code":""},{"path":"https://thechibo.github.io/joker/reference/LargeMetrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Large Sample Metrics — LargeMetrics","text":"distribution D used specify initial distribution. list prm contains details concerning single parameter allowed change values. quantity interest evaluated function parameter. prm list includes two elements named \"name\" \"val\". first one specifies parameter changes, second one numeric vector holding values takes. case parameter interest vector, third element named \"pos\" can specified indicate exact parameter changes. example shown , evaluation performed Dirichlet distributions shape parameters (0.5, 1), (0.6, 1), ..., (2, 1). Notice initial shape parameter value (1) utilized function.","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/LargeMetrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Large Sample Metrics — LargeMetrics","text":"","code":"# \\donttest{ # ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  D <- Beta(shape1 = 1, shape2 = 2)  prm <- list(name = \"shape1\",             val = seq(0.5, 2, by = 0.1))  x <- large_metrics(D, prm,                    est = c(\"mle\", \"me\", \"same\"))  plot(x)   # ----------------------------------------------------- # Dirichlet Distribution Example # -----------------------------------------------------  D <- Dir(alpha = 1:2)  prm <- list(name = \"alpha\",             pos = 1,             val = seq(0.5, 2, by = 0.1))  x <- large_metrics(D, prm,                    est = c(\"mle\", \"me\", \"same\"))  plot(x)  # }"},{"path":"https://thechibo.github.io/joker/reference/Lnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-Normal Distribution — Lnorm","title":"Log-Normal Distribution — Lnorm","text":"Lognormal distribution absolute continuous probability distribution random variable whose logarithm normally distributed. defined parameters \\(\\mu\\) \\(\\sigma > 0\\), mean standard deviation underlying normal distribution.","code":""},{"path":"https://thechibo.github.io/joker/reference/Lnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-Normal Distribution — Lnorm","text":"","code":"Lnorm(meanlog = 0, sdlog = 1)  # S4 method for class 'Lnorm,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Lnorm,numeric' p(distr, q, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Lnorm,numeric' qn(distr, p, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Lnorm,numeric' r(distr, n)  # S4 method for class 'Lnorm' mean(x)  # S4 method for class 'Lnorm' median(x)  # S4 method for class 'Lnorm' mode(x)  # S4 method for class 'Lnorm' var(x)  # S4 method for class 'Lnorm' sd(x)  # S4 method for class 'Lnorm' skew(x)  # S4 method for class 'Lnorm' kurt(x)  # S4 method for class 'Lnorm' entro(x)  # S4 method for class 'Lnorm' finf(x)  lllnorm(x, meanlog, sdlog)  # S4 method for class 'Lnorm,numeric' ll(distr, x)  elnorm(x, type = \"mle\", ...)  # S4 method for class 'Lnorm,numeric' mle(distr, x, na.rm = FALSE)  # S4 method for class 'Lnorm,numeric' me(distr, x, na.rm = FALSE)  vlnorm(meanlog, sdlog, type = \"mle\")  # S4 method for class 'Lnorm' avar_mle(distr)  # S4 method for class 'Lnorm' avar_me(distr)"},{"path":"https://thechibo.github.io/joker/reference/Lnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-Normal Distribution — Lnorm","text":"meanlog, sdlog numeric. distribution parameters. distr object class Lnorm. x density function, x numeric vector quantiles. moments functions, x object class Lnorm. log-likelihood estimation functions, x sample observations. log, log.p logical. logarithm probability returned? q numeric. Vector quantiles. lower.tail logical. TRUE (default), probabilities \\(P(X \\leq x)\\), otherwise \\(P(X > x)\\). p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required. type character, case ignored. estimator type (mle ). ... extra arguments. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Lnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-Normal Distribution — Lnorm","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Lnorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log-Normal Distribution — Lnorm","text":"probability density function (PDF) Lognormal distribution : $$ f(x; \\mu, \\sigma) = \\frac{1}{x \\sigma \\sqrt{2\\pi}} e^{-\\frac{(\\log x - \\mu)^2}{2 \\sigma^2}}, \\quad x > 0 .$$","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Lnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-Normal Distribution — Lnorm","text":"","code":"# ----------------------------------------------------- # Lnorm Distribution Example # -----------------------------------------------------  # Create the distribution m <- 3 ; s <- 5 D <- Lnorm(m, s)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 2, 10)) # density function #> [1] 0.186771116 0.035866376 0.007901606 p(D, c(0.3, 2, 10)) # distribution function #> [1] 0.2002315 0.3222664 0.4445343 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1]    5.659098 1350.332541 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 3.772171e-03 6.671290e-04 2.517216e-01 2.635158e-01 2.382044e-02 #>   [6] 1.684454e-02 4.383061e-07 1.117212e+01 8.996097e-03 2.162057e-03 #>  [11] 8.727851e-02 4.899467e-02 1.713367e-02 6.732309e-02 1.853741e-02 #>  [16] 8.113191e-04 5.324813e-05 1.356071e-07 1.017682e-03 7.736096e-04 #>  [21] 8.264750e-03 7.530464e-04 1.906528e-02 1.468408e-01 4.347717e-03 #>  [26] 9.125370e-03 8.930959e-03 8.686833e-05 1.179629e-03 2.959542e+01 #>  [31] 2.667211e-03 3.092216e-02 2.389078e-02 4.967730e-03 1.347887e-06 #>  [36] 1.708972e-02 3.116280e-01 2.131902e-07 1.426817e-01 1.118841e-03 #>  [41] 3.133833e-01 4.157483e-01 4.424566e-01 1.086775e-02 2.435180e-06 #>  [46] 2.668187e-04 1.550838e+00 3.593631e-01 8.414336e-04 4.046170e-04 #>  [51] 8.304027e-02 3.819082e+01 9.643371e-04 1.150166e-02 4.434309e-04 #>  [56] 2.656873e-04 3.249186e-01 4.667622e-05 7.738186e-07 2.445277e-04 #>  [61] 5.416448e-08 8.213517e-05 7.023487e-03 5.885826e-05 9.509842e-08 #>  [66] 2.548425e-02 1.261995e-10 3.515978e-06 1.039084e+01 1.134171e-04 #>  [71] 5.039501e-02 7.760113e-06 1.411286e-06 2.252489e-03 1.029574e-03 #>  [76] 1.558956e-05 4.999391e-03 8.378587e-02 3.263977e-01 1.408740e-02 #>  [81] 2.805362e+00 4.975963e-03 1.067992e-04 2.357552e-04 1.502800e-04 #>  [86] 8.716583e-02 2.010319e-06 5.689029e-01 1.024153e-04 6.980956e-02 #>  [91] 2.143243e-02 7.201897e-06 5.724365e-07 8.511594e-06 6.702402e-04 #>  [96] 1.328477e+01 4.146778e-02 5.373587e-03 4.034312e-04 8.253889e-01  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 5389698 median(D) # Median #> [1] 20.08554 mode(D) # Mode #> [1] 2.789468e-10 var(D) # Variance #> [1] 2.091659e+24 sd(D) # Standard Deviation #> [1] 1.446257e+12 skew(D) # Skewness #> [1] 1.93216e+16 kurt(D) # Excess Kurtosis #> [1] 2.688117e+43 entro(D) # Entropy #> [1] 8.697109 finf(D) # Fisher Information Matrix #>         meanlog sdlog #> meanlog     0.2   0.0 #> sdlog       0.0   0.4  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 5389698  # ------------------ # Point Estimation # ------------------  elnorm(x, type = \"mle\") #> $meanlog #> [1] 3.10186 #>  #> $sdlog #> [1] 4.823037 #>  elnorm(x, type = \"me\") #> $meanlog #> [1] 3.10186 #>  #> $sdlog #> [1] 4.823037 #>   mle(D, x) #> $meanlog #> [1] 3.10186 #>  #> $sdlog #> [1] 4.823037 #>  me(D, x) #> $meanlog #> [1] 3.10186 #>  #> $sdlog #> [1] 4.823037 #>  e(D, x, type = \"mle\") #> $meanlog #> [1] 3.10186 #>  #> $sdlog #> [1] 4.823037 #>   mle(\"lnorm\", x) # the distr argument can be a character #> $meanlog #> [1] 3.10186 #>  #> $sdlog #> [1] 4.823037 #>   # ------------------ # Estimator Variance # ------------------  vlnorm(m, s, type = \"mle\") #>         meanlog sdlog #> meanlog       5   0.0 #> sdlog         0   2.5 vlnorm(m, s, type = \"me\") #>         meanlog sdlog #> meanlog       5   0.0 #> sdlog         0   2.5  avar_mle(D) #>         meanlog sdlog #> meanlog       5   0.0 #> sdlog         0   2.5 avar_me(D) #>         meanlog sdlog #> meanlog       5   0.0 #> sdlog         0   2.5  v(D, type = \"mle\") #>         meanlog sdlog #> meanlog       5   0.0 #> sdlog         0   2.5"},{"path":"https://thechibo.github.io/joker/reference/loglikelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-Likelihood Function — loglikelihood","title":"Log-Likelihood Function — loglikelihood","text":"function calculates log-likelihood independent identically distributed (iid) sample distribution. See Details.","code":""},{"path":"https://thechibo.github.io/joker/reference/loglikelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-Likelihood Function — loglikelihood","text":"","code":"ll(distr, x, ...)"},{"path":"https://thechibo.github.io/joker/reference/loglikelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-Likelihood Function — loglikelihood","text":"distr Distribution object x numeric. sample estimation. ... extra arguments.","code":""},{"path":"https://thechibo.github.io/joker/reference/loglikelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-Likelihood Function — loglikelihood","text":"distr argument supplied, ll() returns function. distr x supplied, ll() returns numeric, value log-likelihood function.","code":""},{"path":"https://thechibo.github.io/joker/reference/loglikelihood.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log-Likelihood Function — loglikelihood","text":"log-likelihood functions provided two forms: ll<name> distribution-specific version follows stats package conventions, S4 generic ll. Examples ll<name> version included distribution-specific help pages, e.g. ?Beta (distributions can found See Also section Distributions help page). d(), p(), q(), r() methods, ll() can supplied distr return log-likelihood function (.e. can used functional), distr x evaluated directly. distribution families like beta gamma, MLE explicitly derived numerical optimization algorithms employed. Even “good\" scenarios, plenty observations smooth optimization function, extra care taken ensure fast right convergence possible. Two important steps taken package direction: log-likelihood function analytically calculated distribution family, constant terms respect parameters can removed, leaving sufficient statistics requirement function evaluation. Multidimensional problems reduced unidimensional ones utilizing score equations. resulting function inserted optimization algorithm called lloptim(), confused actual log-likelihood function ll(). corresponding derivative called dlloptim(). functions used internally exported. Therefore, whenever numerical computation MLE required, optim() called optimize lloptim(), using starting point (user's choice), L-BFGS-U optimization algorithm, lower upper limits defined default parameter space boundary. Illustrative examples can found package vignette.","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/loglikelihood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-Likelihood Function — loglikelihood","text":"","code":"# ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  # Create the distribution a <- 3 b <- 5 D <- Beta(a, b)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 0.8, 0.5)) # density function #> [1] 2.268945 0.107520 1.640625 p(D, c(0.3, 0.8, 0.5)) # distribution function #> [1] 0.3529305 0.9953280 0.7734375 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 0.3205858 0.5167578 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 1.7851371 1.6158350 1.8831781 2.3045040 2.2205275 1.5793396 1.1770878 #>   [8] 2.3042618 1.2800954 0.6658872 2.0576716 2.2848265 1.6149912 1.0887630 #>  [15] 2.2317215 1.6721279 2.1187735 0.2271411 1.7116001 1.8887920 2.1966674 #>  [22] 0.6208597 0.4909717 1.9340585 2.2601533 0.9333753 2.2851968 1.6134685 #>  [29] 1.8938827 2.2891671 2.3039898 1.6144085 2.2729664 1.5983859 1.6480103 #>  [36] 1.9552379 1.3160884 0.4814330 1.7809212 1.3228666 1.3184469 2.0666304 #>  [43] 2.2827307 2.0837601 1.5420218 2.1792920 1.2426316 2.1115211 1.9887922 #>  [50] 1.7716759 2.2223997 1.7971389 1.4612738 0.5583837 2.1420633 2.0977546 #>  [57] 1.3226088 1.3105294 0.8628855 1.7648335 1.7796204 2.0334251 1.5808053 #>  [64] 1.4721859 1.9030829 1.0340463 1.4202481 1.7353987 2.2324880 1.4847137 #>  [71] 2.2580652 1.1813369 1.6089141 1.5267540 0.6130996 2.2864078 2.1086791 #>  [78] 2.2795250 1.4493381 2.1531247 1.0302573 2.2977963 2.3042097 2.3023549 #>  [85] 2.2933047 0.1138212 2.2778024 1.9848331 2.2984321 2.2476951 0.7530797 #>  [92] 2.2385515 1.1660503 2.0617423 1.3656245 1.9102785 2.1218297 2.2878026 #>  [99] 1.5673847 1.6756807  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 0.375 var(D) # Variance #> [1] 0.02604167 sd(D) # Standard Deviation #> [1] 0.1613743 skew(D) # Skewness #> [1] 0.3098387 kurt(D) # Excess Kurtosis #> [1] 0.04 entro(D) # Entropy #> [1] -0.4301508 finf(D) # Fisher Information Matrix #>            shape1      shape2 #> shape1  0.2617971 -0.13313701 #> shape2 -0.1331370  0.08818594  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 0.375  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] 45.17075 llbeta(x, a, b) #> [1] 45.17075  ebeta(x, type = \"mle\") #> $shape1 #> [1] 3.154097 #>  #> $shape2 #> [1] 5.279473 #>  ebeta(x, type = \"me\") #> $shape1 #> [1] 3.015129 #>  #> $shape2 #> [1] 5.065686 #>  ebeta(x, type = \"same\") #> $shape1 #> [1] 3.107776 #>  #> $shape2 #> [1] 5.221341 #>   mle(D, x) #> $shape1 #> [1] 3.154097 #>  #> $shape2 #> [1] 5.279473 #>  me(D, x) #> $shape1 #> [1] 3.015129 #>  #> $shape2 #> [1] 5.065686 #>  same(D, x) #> $shape1 #> [1] 3.107776 #>  #> $shape2 #> [1] 5.221341 #>  e(D, x, type = \"mle\") #> $shape1 #> [1] 3.154097 #>  #> $shape2 #> [1] 5.279473 #>   mle(\"beta\", x) # the distr argument can be a character #> $shape1 #> [1] 3.154097 #>  #> $shape2 #> [1] 5.279473 #>   # ------------------ # Estimator Variance # ------------------  vbeta(a, b, type = \"mle\") #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 vbeta(a, b, type = \"me\") #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 vbeta(a, b, type = \"same\") #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  avar_mle(D) #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 avar_me(D) #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 avar_same(D) #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  v(D, type = \"mle\") #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039"},{"path":"https://thechibo.github.io/joker/reference/Matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix Wrappers — Matrix","title":"Matrix Wrappers — Matrix","text":"Simple wrappers functions Matrix package.","code":""},{"path":"https://thechibo.github.io/joker/reference/Matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matrix Wrappers — Matrix","text":"","code":"Matrix(...)  nearPD(x)"},{"path":"https://thechibo.github.io/joker/reference/Matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matrix Wrappers — Matrix","text":"... extra arguments passed Matrix::Matrix(). x matrix","code":""},{"path":"https://thechibo.github.io/joker/reference/Matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matrix Wrappers — Matrix","text":"matrix","code":""},{"path":"https://thechibo.github.io/joker/reference/Matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matrix Wrappers — Matrix","text":"","code":"if (FALSE) { # \\dontrun{ x <- matrix(1:4, nrow = 2, ncol = 2) Matrix(x) nearPD(x) } # }"},{"path":"https://thechibo.github.io/joker/reference/moments.html","id":null,"dir":"Reference","previous_headings":"","what":"Moments - Parametric Quantities of Interest — moments","title":"Moments - Parametric Quantities of Interest — moments","text":"set functions calculate theoretical moments (expectation, variance, skewness, excess kurtosis) important parametric functions (median, mode, entropy, Fisher information) distribution.","code":""},{"path":"https://thechibo.github.io/joker/reference/moments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moments - Parametric Quantities of Interest — moments","text":"","code":"moments(x)  mean(x, ...)  median(x, na.rm = FALSE, ...)  mode(x)  var(x, y = NULL, na.rm = FALSE, use)  sd(x, na.rm = FALSE)  skew(x, ...)  kurt(x, ...)  entro(x, ...)  finf(x, ...)"},{"path":"https://thechibo.github.io/joker/reference/moments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Moments - Parametric Quantities of Interest — moments","text":"x Distribution object. ... extra arguments. y, use, na.rm arguments mean var standard methods stats package used .","code":""},{"path":"https://thechibo.github.io/joker/reference/moments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Moments - Parametric Quantities of Interest — moments","text":"Numeric, either vector matrix depending moment distribution. moments() function returns list available methods.","code":""},{"path":"https://thechibo.github.io/joker/reference/moments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Moments - Parametric Quantities of Interest — moments","text":"Given distribution, functions calculate theoretical moments parametric quantities interest. distribution-function combinations available; example, sd() function available univariate distributions. moments() function automatically finds available methods given distribution results results list. Technical Note: argument moment functions follow naming convention package, .e. Distribution object names x rather distr. due fact generics already defined stats package (mean, median, mode, var, sd), therefore first argument already named x change.","code":""},{"path":"https://thechibo.github.io/joker/reference/moments.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Moments - Parametric Quantities of Interest — moments","text":"median(): Median mode(): Mode var(): Variance sd(): Standard Deviation skew(): Skewness kurt(): Kurtosis entro(): Entropy finf(): Fisher Information (numeric matrix)","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/moments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Moments - Parametric Quantities of Interest — moments","text":"","code":"# ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  # Create the distribution a <- 3 b <- 5 D <- Beta(a, b)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 0.8, 0.5)) # density function #> [1] 2.268945 0.107520 1.640625 p(D, c(0.3, 0.8, 0.5)) # distribution function #> [1] 0.3529305 0.9953280 0.7734375 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 0.3205858 0.5167578 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 2.1866737 1.8607350 0.4562757 0.9761423 1.7081981 2.2178898 2.2024303 #>   [8] 1.3233835 0.7386163 0.8441121 1.1062408 2.0541726 2.2961593 1.1132598 #>  [15] 1.8216994 1.9852110 0.9665665 2.1362498 0.8801992 1.2630775 1.8903052 #>  [22] 1.4761686 1.6241568 2.0172665 1.8199744 0.5491640 2.1152278 0.6348995 #>  [29] 2.3044960 1.7998164 1.6363645 1.4808840 2.2620830 2.2039299 2.1933650 #>  [36] 2.2940351 1.9724819 2.2828936 1.5994340 0.8200878 2.2275840 2.2623429 #>  [43] 1.1391907 2.3043038 1.7004710 0.7990487 1.6704638 1.4793582 1.9839090 #>  [50] 2.3005360 2.2111064 2.2846296 2.2517941 1.9750353 1.9328287 1.8069511 #>  [57] 2.0779686 1.6015518 1.2822302 2.1692320 1.9953819 0.7185783 1.6557242 #>  [64] 2.1560955 2.3043668 0.1997865 1.8153208 1.3722137 1.5286853 2.2872361 #>  [71] 0.5299206 1.2593337 1.2536151 1.4549079 0.2337613 1.2417615 2.2050286 #>  [78] 2.1147822 1.7532197 1.6525623 0.9795870 2.2934107 0.5808408 2.2015315 #>  [85] 1.4792728 2.2918547 1.6580528 1.8619862 2.1378689 2.0677331 2.2525593 #>  [92] 1.2954350 1.8349490 2.3013482 1.4205110 2.2828708 2.1617535 2.2931346 #>  [99] 0.7713010 2.0074225  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 0.375 var(D) # Variance #> [1] 0.02604167 sd(D) # Standard Deviation #> [1] 0.1613743 skew(D) # Skewness #> [1] 0.3098387 kurt(D) # Excess Kurtosis #> [1] 0.04 entro(D) # Entropy #> [1] -0.4301508 finf(D) # Fisher Information Matrix #>            shape1      shape2 #> shape1  0.2617971 -0.13313701 #> shape2 -0.1331370  0.08818594  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 0.375  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] 43.31318 llbeta(x, a, b) #> [1] 43.31318  ebeta(x, type = \"mle\") #> $shape1 #> [1] 2.89074 #>  #> $shape2 #> [1] 5.044725 #>  ebeta(x, type = \"me\") #> $shape1 #> [1] 2.811521 #>  #> $shape2 #> [1] 4.904165 #>  ebeta(x, type = \"same\") #> $shape1 #> [1] 2.862696 #>  #> $shape2 #> [1] 4.99343 #>   mle(D, x) #> $shape1 #> [1] 2.89074 #>  #> $shape2 #> [1] 5.044725 #>  me(D, x) #> $shape1 #> [1] 2.811521 #>  #> $shape2 #> [1] 4.904165 #>  same(D, x) #> $shape1 #> [1] 2.862696 #>  #> $shape2 #> [1] 4.99343 #>  e(D, x, type = \"mle\") #> $shape1 #> [1] 2.89074 #>  #> $shape2 #> [1] 5.044725 #>   mle(\"beta\", x) # the distr argument can be a character #> $shape1 #> [1] 2.89074 #>  #> $shape2 #> [1] 5.044725 #>   # ------------------ # Estimator Variance # ------------------  vbeta(a, b, type = \"mle\") #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 vbeta(a, b, type = \"me\") #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 vbeta(a, b, type = \"same\") #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  avar_mle(D) #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 avar_me(D) #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 avar_same(D) #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  v(D, type = \"mle\") #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039"},{"path":"https://thechibo.github.io/joker/reference/Multigam.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate Gamma Distribution — Multigam","title":"Multivariate Gamma Distribution — Multigam","text":"multivariate gamma distribution multivariate absolute continuous probability distribution, defined cumulative sum independent gamma random variables possibly different shape parameters \\(\\alpha_i > 0, \\\\{1, \\dots, k\\}\\) scale \\(\\beta > 0\\).","code":""},{"path":"https://thechibo.github.io/joker/reference/Multigam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate Gamma Distribution — Multigam","text":"","code":"Multigam(shape = 1, scale = 1)  dmultigam(x, shape, scale, log = FALSE)  rmultigam(n, shape, scale)  # S4 method for class 'Multigam,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Multigam,matrix' d(distr, x, log = FALSE)  # S4 method for class 'Multigam,numeric' r(distr, n)  # S4 method for class 'Multigam' mean(x)  # S4 method for class 'Multigam' var(x)  # S4 method for class 'Multigam' finf(x)  llmultigam(x, shape, scale)  # S4 method for class 'Multigam,matrix' ll(distr, x)  emultigam(x, type = \"mle\", ...)  # S4 method for class 'Multigam,matrix' mle(   distr,   x,   par0 = \"same\",   method = \"L-BFGS-B\",   lower = 1e-05,   upper = Inf,   na.rm = FALSE )  # S4 method for class 'Multigam,matrix' me(distr, x, na.rm = FALSE)  # S4 method for class 'Multigam,matrix' same(distr, x, na.rm = FALSE)  vmultigam(shape, scale, type = \"mle\")  # S4 method for class 'Multigam' avar_mle(distr)  # S4 method for class 'Multigam' avar_me(distr)  # S4 method for class 'Multigam' avar_same(distr)"},{"path":"https://thechibo.github.io/joker/reference/Multigam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate Gamma Distribution — Multigam","text":"shape, scale numeric. non-negative distribution parameters. x density function, x numeric vector quantiles. moments functions, x object class Multigam. log-likelihood estimation functions, x sample observations. log logical. logarithm probability returned? n number observations. length(n) > 1, length taken number required. distr object class Multigam. type character, case ignored. estimator type (mle, , ). ... extra arguments. par0, method, lower, upper arguments passed optim mle optimization. See Details. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Multigam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate Gamma Distribution — Multigam","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Multigam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multivariate Gamma Distribution — Multigam","text":"probability density function (PDF) multivariate gamma distribution given : $$ f(x; \\alpha, \\beta) = \\frac{\\beta^{-\\alpha_0}}{\\prod_{=1}^k\\Gamma(\\alpha_i)}, e^{-x_k/\\beta} x_1^{\\alpha_1-1}\\prod_{=1}^k (x_i - x_{-1})^{(\\alpha_i-1)} \\quad x > 0. $$ MLE multigamma distribution parameters available closed form approximated numerically. done optim(). Specifically, instead solving \\((k+1)\\) optimization problem w.r.t \\(\\alpha, \\beta\\), optimization can performed shape parameter sum \\(\\alpha_0:=\\sum_{=1}^k\\alpha \\(0,+\\infty)^k\\). default method used L-BFGS-B method lower bound 1e-5 upper bound Inf. par0 argument can either numeric (satisfying lower <= par0 <= upper) character specifying closed-form estimator used initialization algorithm (\"\" \"\" - default value).","code":""},{"path":"https://thechibo.github.io/joker/reference/Multigam.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Multivariate Gamma Distribution — Multigam","text":"Mathal, . M., & Moschopoulos, P. G. (1992). form multivariate gamma distribution. Annals Institute Statistical Mathematics, 44, 97-106. Oikonomidis, . & Trevezas, S. (2025), Moment-Type Estimators Dirichlet Multivariate Gamma Distributions, arXiv, https://arxiv.org/abs/2311.15025","code":""},{"path":"https://thechibo.github.io/joker/reference/Multigam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate Gamma Distribution — Multigam","text":"","code":"# ----------------------------------------------------- # Multivariate Gamma Distribution Example # -----------------------------------------------------  # Create the distribution a <- c(0.5, 3, 5) ; b <- 5 D <- Multigam(a, b)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 2, 10)) # density function #> [1] 0.0001605858  # alternative way to use the function df <- d(D) ; df(c(0.3, 2, 10)) # df is a function itself #> [1] 0.0001605858  x <- r(D, 100) # random generator function  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1]  2.5 17.5 42.5 var(D) # Variance #> [1]  12.5  87.5 212.5 finf(D) # Fisher Information Matrix #>          shape1    shape2   shape3 scale #> shape1 4.934802 0.0000000 0.000000  0.20 #> shape2 0.000000 0.3949341 0.000000  0.20 #> shape3 0.000000 0.0000000 0.221323  0.20 #> scale  0.200000 0.2000000 0.200000  0.34  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1]  2.5 17.5 42.5  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] -358.8854 llmultigam(x, a, b) #> [1] -358.8854  emultigam(x, type = \"mle\") #> $shape #> [1] 0.5167311 3.0827569 5.0220514 #>  #> $scale #> [1] 5.056676 #>  emultigam(x, type = \"me\") #> $shape #> [1] 0.5933877 3.4603289 5.6212319 #>  #> $scale #> [1] 4.506105 #>  emultigam(x, type = \"same\") #> $shape #> [1] 0.5316584 3.1003557 5.0364629 #>  #> $scale #> [1] 5.029296 #>   mle(D, x) #> $shape #> [1] 0.5167311 3.0827569 5.0220514 #>  #> $scale #> [1] 5.056676 #>  me(D, x) #> $shape #> [1] 0.5933877 3.4603289 5.6212319 #>  #> $scale #> [1] 4.506105 #>  same(D, x) #> $shape #> [1] 0.5316584 3.1003557 5.0364629 #>  #> $scale #> [1] 5.029296 #>  e(D, x, type = \"mle\") #> $shape #> [1] 0.5167311 3.0827569 5.0220514 #>  #> $scale #> [1] 5.056676 #>   mle(\"multigam\", x) # the distr argument can be a character #> $shape #> [1] 0.5167311 3.0827569 5.0220514 #>  #> $scale #> [1] 5.056676 #>   # ------------------ # Estimator Variance # ------------------  vmultigam(a, b, type = \"mle\") #>            shape1      shape2      shape3       scale #> shape1  0.2355724   0.4114692   0.7342357  -0.8125161 #> shape2  0.4114692   7.6734815   9.1744629 -10.1525963 #> shape3  0.7342357   9.1744629  20.8894190 -18.1165398 #> scale  -0.8125161 -10.1525963 -18.1165398  20.0480307 vmultigam(a, b, type = \"me\") #>            shape1 shape2     shape3      scale #> shape1  0.5444444    1.1   1.944444  -2.111111 #> shape2  1.1000000   14.6  20.000000 -21.000000 #> shape3  1.9444444   20.0  39.444444 -36.111111 #> scale  -2.1111111  -21.0 -36.111111  37.777778 vmultigam(a, b, type = \"same\") #>            shape1      shape2      shape3       scale #> shape1  0.3813248   0.1212822   0.3132515  -0.4799147 #> shape2  0.1212822   8.7276929  10.2128426 -11.2128216 #> shape3  0.3132515  10.2128426  23.1325478 -19.7991821 #> scale  -0.4799147 -11.2128216 -19.7991821  21.4658137  avar_mle(D) #>            shape1      shape2      shape3       scale #> shape1  0.2355724   0.4114692   0.7342357  -0.8125161 #> shape2  0.4114692   7.6734815   9.1744629 -10.1525963 #> shape3  0.7342357   9.1744629  20.8894190 -18.1165398 #> scale  -0.8125161 -10.1525963 -18.1165398  20.0480307 avar_me(D) #>            shape1 shape2     shape3      scale #> shape1  0.5444444    1.1   1.944444  -2.111111 #> shape2  1.1000000   14.6  20.000000 -21.000000 #> shape3  1.9444444   20.0  39.444444 -36.111111 #> scale  -2.1111111  -21.0 -36.111111  37.777778 avar_same(D) #>            shape1      shape2      shape3       scale #> shape1  0.3813248   0.1212822   0.3132515  -0.4799147 #> shape2  0.1212822   8.7276929  10.2128426 -11.2128216 #> shape3  0.3132515  10.2128426  23.1325478 -19.7991821 #> scale  -0.4799147 -11.2128216 -19.7991821  21.4658137  v(D, type = \"mle\") #>            shape1      shape2      shape3       scale #> shape1  0.2355724   0.4114692   0.7342357  -0.8125161 #> shape2  0.4114692   7.6734815   9.1744629 -10.1525963 #> shape3  0.7342357   9.1744629  20.8894190 -18.1165398 #> scale  -0.8125161 -10.1525963 -18.1165398  20.0480307"},{"path":"https://thechibo.github.io/joker/reference/Multinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Multinomial Distribution — Multinom","title":"Multinomial Distribution — Multinom","text":"multinomial distribution discrete probability distribution models probability x successes n independent categorical trials success probability vector p.","code":""},{"path":"https://thechibo.github.io/joker/reference/Multinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multinomial Distribution — Multinom","text":"","code":"Multinom(size = 1, prob = c(0.5, 0.5))  # S4 method for class 'Multinom,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Multinom,numeric' r(distr, n)  # S4 method for class 'Multinom' mean(x)  # S4 method for class 'Multinom' mode(x)  # S4 method for class 'Multinom' var(x)  # S4 method for class 'Multinom' entro(x)  # S4 method for class 'Multinom' finf(x)  llmultinom(x, size, prob)  # S4 method for class 'Multinom,matrix' ll(distr, x)  emultinom(x, type = \"mle\", ...)  # S4 method for class 'Multinom,matrix' mle(distr, x, na.rm = FALSE)  # S4 method for class 'Multinom,matrix' me(distr, x, na.rm = FALSE)  vmultinom(size, prob, type = \"mle\")  # S4 method for class 'Multinom' avar_mle(distr)  # S4 method for class 'Multinom' avar_me(distr)"},{"path":"https://thechibo.github.io/joker/reference/Multinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multinomial Distribution — Multinom","text":"size number trials (zero ). prob numeric. Probability success trial. distr object class Multinom. x density function, x numeric vector quantiles. moments functions, x object class Multinom. log-likelihood estimation functions, x sample observations. log logical. logarithm probability returned? n number observations. length(n) > 1, length taken number required. type character, case ignored. estimator type (mle ). ... extra arguments. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Multinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multinomial Distribution — Multinom","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Multinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multinomial Distribution — Multinom","text":"probability mass function (PMF) Multinomial distribution : $$ P(X_1 = x_1, ..., X_k = x_k) = \\frac{n!}{x_1! x_2! ... x_k!} \\prod_{=1}^k p_i^{x_i}, $$ subject \\( \\sum_{=1}^{k} x_i = n \\).","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Multinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multinomial Distribution — Multinom","text":"","code":"# ----------------------------------------------------- # Multinomial Distribution Example # -----------------------------------------------------  # Create the distribution N <- 10 ; p <- c(0.1, 0.2, 0.7) D <- Multinom(N, p)  # ------------------ # dpqr Functions # ------------------  d(D, c(2, 3, 5)) # density function #> [1] 0.03388291  # alternative way to use the function df <- d(D) ; df(c(2, 3, 5)) # df is a function itself #> [1] 0.03388291  x <- r(D, 100) # random generator function  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 1 2 7 mode(D) # Mode #> [1] 3 var(D) # Variance #>      [,1] [,2] [,3] #> [1,]  0.9 -0.2 -0.7 #> [2,] -0.2  1.6 -1.4 #> [3,] -0.7 -1.4  2.1 entro(D) # Entropy #> [1] 2.885135 finf(D) # Fisher Information Matrix #>           prob1     prob2 #> prob1  85.71429 -14.28571 #> prob2 -14.28571  35.71429  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 1 2 7  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] -292.1644 llmultinom(x, N, p) #> [1] -292.1644  emultinom(x, type = \"mle\") #> $prob #> [1] 0.099 0.189 0.712 #>  emultinom(x, type = \"me\") #> $prob #> [1] 0.099 0.189 0.712 #>   mle(D, x) #> $prob #> [1] 0.099 0.189 0.712 #>  me(D, x) #> $prob #> [1] 0.099 0.189 0.712 #>  e(D, x, type = \"mle\") #> $prob #> [1] 0.099 0.189 0.712 #>   mle(\"multinom\", x) # the distr argument can be a character #> $prob #> [1] 0.099 0.189 0.712 #>   # ------------------ # Estimator Variance # ------------------  vmultinom(N, p, type = \"mle\") #>        prob1 prob2 #> prob1 0.0125 0.005 #> prob2 0.0050 0.030 vmultinom(N, p, type = \"me\") #>        prob1 prob2 #> prob1 0.0125 0.005 #> prob2 0.0050 0.030  avar_mle(D) #>        prob1 prob2 #> prob1 0.0125 0.005 #> prob2 0.0050 0.030 avar_me(D) #>        prob1 prob2 #> prob1 0.0125 0.005 #> prob2 0.0050 0.030  v(D, type = \"mle\") #>        prob1 prob2 #> prob1 0.0125 0.005 #> prob2 0.0050 0.030"},{"path":"https://thechibo.github.io/joker/reference/Nbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Negative Binomial Distribution — Nbinom","title":"Negative Binomial Distribution — Nbinom","text":"Negative Binomial distribution discrete probability distribution models number failures specified number successes occurs sequence independent Bernoulli trials. defined parameters \\(r > 0\\) (number successes) \\(0 < p \\leq 1\\) (probability success).","code":""},{"path":"https://thechibo.github.io/joker/reference/Nbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negative Binomial Distribution — Nbinom","text":"","code":"Nbinom(size = 1, prob = 0.5)  # S4 method for class 'Nbinom,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Nbinom,numeric' p(distr, q, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Nbinom,numeric' qn(distr, p, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Nbinom,numeric' r(distr, n)  # S4 method for class 'Nbinom' mean(x)  # S4 method for class 'Nbinom' median(x)  # S4 method for class 'Nbinom' mode(x)  # S4 method for class 'Nbinom' var(x)  # S4 method for class 'Nbinom' sd(x)  # S4 method for class 'Nbinom' skew(x)  # S4 method for class 'Nbinom' kurt(x)  # S4 method for class 'Nbinom' entro(x)  # S4 method for class 'Nbinom' finf(x)  llnbinom(x, size, prob)  # S4 method for class 'Nbinom,numeric' ll(distr, x)  enbinom(x, size, type = \"mle\", ...)  # S4 method for class 'Nbinom,numeric' mle(distr, x, na.rm = FALSE)  # S4 method for class 'Nbinom,numeric' me(distr, x, na.rm = FALSE)  vnbinom(size, prob, type = \"mle\")  # S4 method for class 'Nbinom' avar_mle(distr)  # S4 method for class 'Nbinom' avar_me(distr)"},{"path":"https://thechibo.github.io/joker/reference/Nbinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Negative Binomial Distribution — Nbinom","text":"size number trials (zero ). prob numeric. Probability success trial. distr object class Nbinom. x density function, x numeric vector quantiles. moments functions, x object class Nbinom. log-likelihood estimation functions, x sample observations. log, log.p logical. logarithm probability returned? q numeric. Vector quantiles. lower.tail logical. TRUE (default), probabilities \\(P(X \\leq x)\\), otherwise \\(P(X > x)\\). p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required. type character, case ignored. estimator type (mle ). ... extra arguments. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Nbinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Negative Binomial Distribution — Nbinom","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Nbinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Negative Binomial Distribution — Nbinom","text":"probability mass function (PMF) negative binomial distribution : $$ P(X = k) = \\binom{k + r - 1}{k} (1 - p)^k p^r, \\quad k \\\\mathbb{N}_0.$$","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Nbinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Negative Binomial Distribution — Nbinom","text":"","code":"# ----------------------------------------------------- # Negative Binomial Distribution Example # -----------------------------------------------------  # Create the distribution N <- 10 ; p <- 0.4 D <- Nbinom(N, p)  # ------------------ # dpqr Functions # ------------------  d(D, 0:4) # density function #> [1] 0.0001048576 0.0006291456 0.0020761805 0.0049828332 0.0097165246 p(D, 0:4) # distribution function #> [1] 0.0001048576 0.0007340032 0.0028101837 0.0077930168 0.0175095415 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 13 20 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 0.0638953912 0.0644631755 0.0499115616 0.0329101076 0.0244856421 #>   [6] 0.0513778730 0.0681223171 0.0513778730 0.0604342270 0.0156364106 #>  [11] 0.0671491411 0.0554572907 0.0585707753 0.0585707753 0.0038031980 #>  [16] 0.0681223171 0.0681223171 0.0244856421 0.0681223171 0.0638953912 #>  [21] 0.0513778730 0.0499115616 0.0428148942 0.0191622678 0.0232269913 #>  [26] 0.0638953912 0.0670901608 0.0499115616 0.0604342270 0.0681223171 #>  [31] 0.0001048576 0.0638953912 0.0604342270 0.0428148942 0.0163237614 #>  [36] 0.0499115616 0.0604342270 0.0441323282 0.0513778730 0.0156364106 #>  [41] 0.0163237614 0.0062980310 0.0644631755 0.0513778730 0.0428148942 #>  [46] 0.0101035268 0.0191622678 0.0499115616 0.0681223171 0.0329101076 #>  [51] 0.0585707753 0.0638953912 0.0038031980 0.0029237085 0.0383951255 #>  [56] 0.0191622678 0.0499115616 0.0329101076 0.0329101076 0.0670901608 #>  [61] 0.0554572907 0.0670901608 0.0244856421 0.0383951255 0.0670901608 #>  [66] 0.0681223171 0.0644631755 0.0644631755 0.0671491411 0.0670901608 #>  [71] 0.0670901608 0.0585707753 0.0670901608 0.0681223171 0.0638953912 #>  [76] 0.0585707753 0.0644631755 0.0329101076 0.0671491411 0.0671491411 #>  [81] 0.0428148942 0.0604342270 0.0244856421 0.0585707753 0.0163237614 #>  [86] 0.0604342270 0.0671491411 0.0604342270 0.0585707753 0.0513778730 #>  [91] 0.0499115616 0.0062980310 0.0022326501 0.0671491411 0.0644631755 #>  [96] 0.0441323282 0.0671491411 0.0554572907 0.0513778730 0.0513778730  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 15 median(D) # Median #> [1] 14 mode(D) # Mode #> [1] 13 var(D) # Variance #> [1] 37.5 sd(D) # Standard Deviation #> [1] 6.123724 skew(D) # Skewness #> [1] 0.6531973 kurt(D) # Excess Kurtosis #> [1] 0.6266667 entro(D) # Entropy #> [1] 1.048722 finf(D) # Fisher Information Matrix #>     prob  #> 104.1667   # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 15  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] -325.7134 llnbinom(x, N, p) #> [1] -325.7134  enbinom(x, N, type = \"mle\") #> $prob #> [1] 0.4025765 #>  enbinom(x, N, type = \"me\") #> $prob #> [1] 0.4025765 #>   mle(D, x) #> $prob #> [1] 0.4025765 #>  me(D, x) #> $prob #> [1] 0.4025765 #>  e(D, x, type = \"mle\") #> $prob #> [1] 0.4025765 #>   # ------------------ # Estimator Variance # ------------------  vnbinom(N, p, type = \"mle\") #>   prob  #> 0.0096  vnbinom(N, p, type = \"me\") #>   prob  #> 0.0096   avar_mle(D) #>   prob  #> 0.0096  avar_me(D) #>   prob  #> 0.0096   v(D, type = \"mle\") #>   prob  #> 0.0096"},{"path":"https://thechibo.github.io/joker/reference/Norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Normal Distribution — Norm","title":"Normal Distribution — Norm","text":"Normal Gaussian distribution, absolute continuous probability distribution characterized two parameters: mean \\(\\mu\\) standard deviation \\(\\sigma > 0\\).","code":""},{"path":"https://thechibo.github.io/joker/reference/Norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normal Distribution — Norm","text":"","code":"Norm(mean = 0, sd = 1)  # S4 method for class 'Norm,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Norm,numeric' p(distr, q, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Norm,numeric' qn(distr, p, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Norm,numeric' r(distr, n)  # S4 method for class 'Norm' mean(x)  # S4 method for class 'Norm' median(x)  # S4 method for class 'Norm' mode(x)  # S4 method for class 'Norm' var(x)  # S4 method for class 'Norm' sd(x)  # S4 method for class 'Norm' skew(x)  # S4 method for class 'Norm' kurt(x)  # S4 method for class 'Norm' entro(x)  # S4 method for class 'Norm' finf(x)  llnorm(x, mean, sd)  # S4 method for class 'Norm,numeric' ll(distr, x)  enorm(x, type = \"mle\", ...)  # S4 method for class 'Norm,numeric' mle(distr, x, na.rm = FALSE)  # S4 method for class 'Norm,numeric' me(distr, x, na.rm = FALSE)  vnorm(mean, sd, type = \"mle\")  # S4 method for class 'Norm' avar_mle(distr)  # S4 method for class 'Norm' avar_me(distr)"},{"path":"https://thechibo.github.io/joker/reference/Norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normal Distribution — Norm","text":"mean, sd numeric. distribution parameters. distr object class Norm. x density function, x numeric vector quantiles. moments functions, x object class Norm. log-likelihood estimation functions, x sample observations. log, log.p logical. logarithm probability returned? q numeric. Vector quantiles. lower.tail logical. TRUE (default), probabilities \\(P(X \\leq x)\\), otherwise \\(P(X > x)\\). p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required. type character, case ignored. estimator type (mle ). ... extra arguments. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normal Distribution — Norm","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Norm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normal Distribution — Norm","text":"probability density function (PDF) Normal distribution : $$ f(x; \\mu, \\sigma) = \\frac{1}{\\sigma \\sqrt{2\\pi}} e^{-\\frac{1}{2} \\left(\\frac{x - \\mu}{\\sigma}\\right)^2} .$$","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normal Distribution — Norm","text":"","code":"# ----------------------------------------------------- # Normal Distribution Example # -----------------------------------------------------  # Create the distribution m <- 3 ; s <- 5 D <- Norm(m, s)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 2, 10)) # density function #> [1] 0.06896360 0.07820854 0.02994549 p(D, c(0.3, 2, 10)) # distribution function #> [1] 0.2945985 0.4207403 0.9192433 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 1.733264 7.208106 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 0.078650831 0.071248098 0.063883691 0.045684726 0.074109441 0.068844386 #>   [7] 0.070942812 0.039245920 0.063001126 0.050106204 0.077751153 0.014420567 #>  [13] 0.064924210 0.032749269 0.050756855 0.074566208 0.079180545 0.075199984 #>  [19] 0.061202487 0.033300464 0.030305207 0.071296206 0.073578283 0.058318078 #>  [25] 0.050180746 0.059131967 0.002231858 0.078676649 0.070579973 0.070531879 #>  [31] 0.038032248 0.069096838 0.070028032 0.078514822 0.072967542 0.079070596 #>  [37] 0.009870757 0.059841532 0.046116138 0.076482025 0.024996400 0.069688283 #>  [43] 0.018916438 0.009799191 0.011214694 0.070064918 0.045776051 0.048613564 #>  [49] 0.065543760 0.072246114 0.031051671 0.060964405 0.067714085 0.078849400 #>  [55] 0.023375544 0.079653692 0.026272925 0.076982656 0.076031342 0.078878473 #>  [61] 0.079473201 0.027871007 0.055928284 0.031634101 0.026608836 0.034119315 #>  [67] 0.075487196 0.006984688 0.053439934 0.067785005 0.057795736 0.078881932 #>  [73] 0.079248060 0.075993189 0.079490983 0.076012578 0.066666695 0.055914427 #>  [79] 0.052621715 0.079407901 0.069083091 0.079376200 0.078922940 0.032720113 #>  [85] 0.034634206 0.010430785 0.074730977 0.078975642 0.061954748 0.077616054 #>  [91] 0.072757376 0.079580945 0.079778382 0.064312658 0.053466269 0.073363851 #>  [97] 0.079733806 0.078418515 0.008356410 0.027016940  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 3 median(D) # Median #> [1] 3 mode(D) # Mode #> [1] 3 var(D) # Variance #> [1] 25 sd(D) # Standard Deviation #> [1] 5 skew(D) # Skewness #> [1] 0 kurt(D) # Excess Kurtosis #> [1] 0 entro(D) # Entropy #> [1] 3.028376 finf(D) # Fisher Information Matrix #>      mean   sd #> mean 0.04 0.00 #> sd   0.00 0.08  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 3  # ------------------ # Point Estimation # ------------------  enorm(x, type = \"mle\") #> $mean #> [1] 3.338379 #>  #> $sd #> [1] 4.817788 #>  enorm(x, type = \"me\") #> $mean #> [1] 3.338379 #>  #> $sd #> [1] 4.817788 #>   mle(D, x) #> $mean #> [1] 3.338379 #>  #> $sd #> [1] 4.817788 #>  me(D, x) #> $mean #> [1] 3.338379 #>  #> $sd #> [1] 4.817788 #>  e(D, x, type = \"mle\") #> $mean #> [1] 3.338379 #>  #> $sd #> [1] 4.817788 #>   mle(\"norm\", x) # the distr argument can be a character #> $mean #> [1] 3.338379 #>  #> $sd #> [1] 4.817788 #>   # ------------------ # Estimator Variance # ------------------  vnorm(m, s, type = \"mle\") #>      mean   sd #> mean   25  0.0 #> sd      0 12.5 vnorm(m, s, type = \"me\") #>      mean   sd #> mean   25  0.0 #> sd      0 12.5  avar_mle(D) #>      mean   sd #> mean   25  0.0 #> sd      0 12.5 avar_me(D) #>      mean   sd #> mean   25  0.0 #> sd      0 12.5  v(D, type = \"mle\") #>      mean   sd #> mean   25  0.0 #> sd      0 12.5"},{"path":"https://thechibo.github.io/joker/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Metrics — plot","title":"Plot Metrics — plot","text":"function provides easy way illustrate objects class SmallMetrics LargeMetrics, using ggplot2 package. See details.","code":""},{"path":"https://thechibo.github.io/joker/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Metrics — plot","text":"","code":"plot(x, y, ...)  # S4 method for class 'SmallMetrics,missing' plot(   x,   y = NULL,   colors = NULL,   title = NULL,   save = FALSE,   path = NULL,   name = \"myplot.pdf\",   width = 15,   height = 8 )  # S4 method for class 'LargeMetrics,missing' plot(   x,   y = NULL,   colors = NULL,   title = NULL,   save = FALSE,   path = NULL,   name = \"myplot.pdf\",   width = 15,   height = 8 )"},{"path":"https://thechibo.github.io/joker/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Metrics — plot","text":"x object class SmallMetrics LargeMetrics. y NULL. ... extra arguments. colors character. colors used plot. title character. plot title. save logical. plot saved? path path directory plot saved. name character. name output pdf file. width numeric. plot width inches. height numeric. plot height inches.","code":""},{"path":"https://thechibo.github.io/joker/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Metrics — plot","text":"plot returned invisibly form ggplot object.","code":""},{"path":"https://thechibo.github.io/joker/reference/plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Metrics — plot","text":"Objects class SmallMetrics LargeMetrics returned small_metrics() large_metrics() functions, respectively. SmallMetrics, grid line charts created metric sample size. LargeMetrics, grid line charts created element asymptotic variance - covariance matrix. estimator plotted different color line type. plot can saved pdf format.","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Metrics — plot","text":"","code":"# \\donttest{ # ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  D <- Beta(shape1 = 1, shape2 = 2)  prm <- list(name = \"shape1\",             val = seq(0.5, 2, by = 0.1))  x <- small_metrics(D, prm,                    est = c(\"mle\", \"me\", \"same\"),                    obs = c(20, 50),                    sam = 1e2,                    seed = 1)  plot(x)   # ----------------------------------------------------- # Dirichlet Distribution Example # -----------------------------------------------------  D <- Dir(alpha = 1:2)  prm <- list(name = \"alpha\",             pos = 1,             val = seq(0.5, 2, by = 0.1))  x <- small_metrics(D, prm,                    est = c(\"mle\", \"me\", \"same\"),                    obs = c(20, 50),                    sam = 1e2,                    seed = 1)  plot(x)  # }"},{"path":"https://thechibo.github.io/joker/reference/Pois.html","id":null,"dir":"Reference","previous_headings":"","what":"Poisson Distribution — Pois","title":"Poisson Distribution — Pois","text":"Poisson distribution discrete probability distribution models number events occurring fixed interval time space, given events occur constant rate \\(\\lambda > 0\\) independently time since last event.","code":""},{"path":"https://thechibo.github.io/joker/reference/Pois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Poisson Distribution — Pois","text":"","code":"Pois(lambda = 1)  # S4 method for class 'Pois,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Pois,numeric' p(distr, q, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Pois,numeric' qn(distr, p, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Pois,numeric' r(distr, n)  # S4 method for class 'Pois' mean(x)  # S4 method for class 'Pois' median(x)  # S4 method for class 'Pois' mode(x)  # S4 method for class 'Pois' var(x)  # S4 method for class 'Pois' sd(x)  # S4 method for class 'Pois' skew(x)  # S4 method for class 'Pois' kurt(x)  # S4 method for class 'Pois' entro(x)  # S4 method for class 'Pois' finf(x)  llpois(x, lambda)  # S4 method for class 'Pois,numeric' ll(distr, x)  epois(x, type = \"mle\", ...)  # S4 method for class 'Pois,numeric' mle(distr, x, na.rm = FALSE)  # S4 method for class 'Pois,numeric' me(distr, x, na.rm = FALSE)  vpois(lambda, type = \"mle\")  # S4 method for class 'Pois' avar_mle(distr)  # S4 method for class 'Pois' avar_me(distr)"},{"path":"https://thechibo.github.io/joker/reference/Pois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Poisson Distribution — Pois","text":"lambda numeric. distribution parameter. distr object class Pois. x density function, x numeric vector quantiles. moments functions, x object class Pois. log-likelihood estimation functions, x sample observations. log, log.p logical. logarithm probability returned? q numeric. Vector quantiles. lower.tail logical. TRUE (default), probabilities \\(P(X \\leq x)\\), otherwise \\(P(X > x)\\). p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required. type character, case ignored. estimator type (mle ). ... extra arguments. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Pois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Poisson Distribution — Pois","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Pois.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Poisson Distribution — Pois","text":"probability mass function (PMF) Poisson distribution : $$ P(X = k) = \\frac{\\lambda^k e^{-\\lambda}}{k!}, \\quad k \\\\mathbb{N}_0. $$","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Pois.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Poisson Distribution — Pois","text":"","code":"# ----------------------------------------------------- # Pois Distribution Example # -----------------------------------------------------  # Create the distribution lambda <- 5 D <- Pois(lambda)  # ------------------ # dpqr Functions # ------------------  d(D, 0:10) # density function #>  [1] 0.006737947 0.033689735 0.084224337 0.140373896 0.175467370 0.175467370 #>  [7] 0.146222808 0.104444863 0.065278039 0.036265577 0.018132789 p(D, 0:10) # distribution function #>  [1] 0.006737947 0.040427682 0.124652019 0.265025915 0.440493285 0.615960655 #>  [7] 0.762183463 0.866628326 0.931906365 0.968171943 0.986304731 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 4 7 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 0.084224337 0.104444863 0.065278039 0.175467370 0.104444863 0.065278039 #>   [7] 0.104444863 0.175467370 0.084224337 0.104444863 0.036265577 0.140373896 #>  [13] 0.175467370 0.175467370 0.104444863 0.036265577 0.065278039 0.006737947 #>  [19] 0.084224337 0.175467370 0.175467370 0.084224337 0.104444863 0.175467370 #>  [25] 0.104444863 0.140373896 0.104444863 0.065278039 0.104444863 0.140373896 #>  [31] 0.065278039 0.175467370 0.175467370 0.175467370 0.175467370 0.175467370 #>  [37] 0.175467370 0.146222808 0.140373896 0.006737947 0.065278039 0.175467370 #>  [43] 0.065278039 0.175467370 0.036265577 0.104444863 0.140373896 0.175467370 #>  [49] 0.175467370 0.175467370 0.175467370 0.104444863 0.065278039 0.084224337 #>  [55] 0.018132789 0.036265577 0.140373896 0.146222808 0.084224337 0.140373896 #>  [61] 0.175467370 0.104444863 0.175467370 0.036265577 0.084224337 0.036265577 #>  [67] 0.104444863 0.175467370 0.146222808 0.084224337 0.008242177 0.175467370 #>  [73] 0.104444863 0.104444863 0.146222808 0.140373896 0.104444863 0.175467370 #>  [79] 0.175467370 0.140373896 0.146222808 0.104444863 0.146222808 0.175467370 #>  [85] 0.084224337 0.175467370 0.175467370 0.084224337 0.175467370 0.175467370 #>  [91] 0.175467370 0.084224337 0.175467370 0.146222808 0.175467370 0.065278039 #>  [97] 0.175467370 0.175467370 0.175467370 0.104444863  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 5 median(D) # Median #> Warning: The median of a Pois(l) distribution is given by the #>                     inequality: l - ln2 <= median < l + 1/3. The lower bound is #>                     returned. #> [1] 4.306853 mode(D) # Mode #> [1] 5 var(D) # Variance #> [1] 5 sd(D) # Standard Deviation #> [1] 2.236068 skew(D) # Skewness #> [1] 0.4472136 kurt(D) # Excess Kurtosis #> [1] 0.2 entro(D) # Entropy #> Warning: The entropy given is an approximation in the O(1 / l ^ 4) order. #> [1] 2.204902 finf(D) # Fisher Information Matrix #> [1] 0.2  # List of all available moments mom <- moments(D) #> Warning: The median of a Pois(l) distribution is given by the #>                     inequality: l - ln2 <= median < l + 1/3. The lower bound is #>                     returned. #> Warning: The entropy given is an approximation in the O(1 / l ^ 4) order. mom$mean # expectation #> [1] 5  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] -224.9327 llpois(x, lambda) #> [1] -224.9327  epois(x, type = \"mle\") #> $lambda #> [1] 5.27 #>  epois(x, type = \"me\") #> $lambda #> [1] 5.27 #>   mle(D, x) #> $lambda #> [1] 5.27 #>  me(D, x) #> $lambda #> [1] 5.27 #>  e(D, x, type = \"mle\") #> $lambda #> [1] 5.27 #>   mle(\"pois\", x) # the distr argument can be a character #> $lambda #> [1] 5.27 #>   # ------------------ # Estimator Variance # ------------------  vpois(lambda, type = \"mle\") #> lambda  #>      5  vpois(lambda, type = \"me\") #> lambda  #>      5   avar_mle(D) #> lambda  #>      5  avar_me(D) #> lambda  #>      5   v(D, type = \"mle\") #> lambda  #>      5"},{"path":"https://thechibo.github.io/joker/reference/progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Progress Bar — progress","title":"Progress Bar — progress","text":"Create progress bar used loops can possibly take lot time.","code":""},{"path":"https://thechibo.github.io/joker/reference/progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Progress Bar — progress","text":"","code":"progress_bar(iter, total, start, message = NULL, width = 20)  format_hms(seconds)"},{"path":"https://thechibo.github.io/joker/reference/progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Progress Bar — progress","text":"iter integer. current iteration step loop. total integer. total number iterations. start POSIXct. start time, returned Sys.time(). message character. message appearing progress bar. width integer. length progress bar. seconds integer. Seconds converted hh:mm:ss format.","code":""},{"path":"https://thechibo.github.io/joker/reference/progress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Progress Bar — progress","text":"format_hms() returns character hh:mm:ss format. progress_bar() prints progress bar console, calling cat(), therefore returns invisible NULL.","code":""},{"path":"https://thechibo.github.io/joker/reference/progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Progress Bar — progress","text":"","code":"if (FALSE) { # \\dontrun{ # Turn seconds into hh:mm:ss format_hms(7543)  n <- 100 start <- Sys.time()  for (i in 1:n) {   Sys.sleep(0.1)  # Simulate time-consuming task   progress_bar(i, n, start, message = \"Computing\", width = 30) } } # }"},{"path":"https://thechibo.github.io/joker/reference/seqcol.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence Functions for Matrices — seqcol","title":"Sequence Functions for Matrices — seqcol","text":"set functions extent seq_along() functions matrix objects.","code":""},{"path":"https://thechibo.github.io/joker/reference/seqcol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence Functions for Matrices — seqcol","text":"","code":"seqcol(x)  seqrow(x)"},{"path":"https://thechibo.github.io/joker/reference/seqcol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence Functions for Matrices — seqcol","text":"x matrix.","code":""},{"path":"https://thechibo.github.io/joker/reference/seqcol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence Functions for Matrices — seqcol","text":"sequence integers 1 number rows columns matrix.","code":""},{"path":"https://thechibo.github.io/joker/reference/seqcol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence Functions for Matrices — seqcol","text":"","code":"if (FALSE) { # \\dontrun{ x <- matrix(1:12, nrow = 3, ncol = 4) seqcol(x) seqrow(x) } # }"},{"path":"https://thechibo.github.io/joker/reference/set1of1.html","id":null,"dir":"Reference","previous_headings":"","what":"Indexing Functions — set1of1","title":"Indexing Functions — set1of1","text":"set functions allow index matrix array. functions used internally dimension length object can vary.","code":""},{"path":"https://thechibo.github.io/joker/reference/set1of1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indexing Functions — set1of1","text":"","code":"set1of1(x, i)  set1of2(x, i)  set1of3(x, i)  set2of3(x, i)"},{"path":"https://thechibo.github.io/joker/reference/set1of1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indexing Functions — set1of1","text":"x atomic vector, matrix, array. object indexed. integer. index.","code":""},{"path":"https://thechibo.github.io/joker/reference/set1of1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indexing Functions — set1of1","text":"vector matrix, subset original object.","code":""},{"path":"https://thechibo.github.io/joker/reference/set1of1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indexing Functions — set1of1","text":"","code":"if (FALSE) { # \\dontrun{ x <- 1:12 y <- matrix(1:12, nrow = 3, ncol = 4) z <- array(1:24, dim = c(3, 4, 2))  set1of1(x) set1of2(y) set1of3(z) set2of3(z) } # }"},{"path":"https://thechibo.github.io/joker/reference/SmallMetrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Small Sample Metrics — SmallMetrics","title":"Small Sample Metrics — SmallMetrics","text":"function performs Monte Carlo simulations estimate main metrics (bias, variance, RMSE) characterizing small (finite) sample behavior estimator. function evaluates metrics function single parameter, keeping ones constant. See Details.","code":""},{"path":"https://thechibo.github.io/joker/reference/SmallMetrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Small Sample Metrics — SmallMetrics","text":"","code":"SmallMetrics(D, est, df)  small_metrics(   D,   prm,   est = c(\"same\", \"me\", \"mle\"),   obs = c(20, 50, 100),   sam = 10000,   seed = 1,   bar = TRUE,   ... )"},{"path":"https://thechibo.github.io/joker/reference/SmallMetrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Small Sample Metrics — SmallMetrics","text":"D subclass Distribution. distribution family interest. est character. estimator interest. Can vector. df data.frame. data.frame columns named \"Row\", \"Col\", \"Parameter\", \"Estimator\", \"Value\". prm list containing three elements (name, pos, val). See Details. obs numeric. size sample. Can vector. sam numeric. number Monte Carlo samples used estimate metrics. seed numeric. Passed set.seed() reproducibility. bar logical. progress bar printed? ... extra arguments.","code":""},{"path":"https://thechibo.github.io/joker/reference/SmallMetrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Small Sample Metrics — SmallMetrics","text":"object class SmallMetrics slots D, est, df.","code":""},{"path":"https://thechibo.github.io/joker/reference/SmallMetrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Small Sample Metrics — SmallMetrics","text":"distribution D used specify initial distribution. list prm contains details concerning single parameter allowed change values. quantity interest evaluated function parameter. prm list includes two elements named \"name\" \"val\". first one specifies parameter changes, second one numeric vector holding values takes. case parameter interest vector, third element named \"pos\" can specified indicate exact parameter changes. example shown , evaluation performed Dirichlet distributions shape parameters (0.5, 1), (0.6, 1), ..., (2, 1). Notice initial shape parameter value (1) utilized function.","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/SmallMetrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Small Sample Metrics — SmallMetrics","text":"","code":"# \\donttest{ # ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  D <- Beta(shape1 = 1, shape2 = 2)  prm <- list(name = \"shape1\",             val = seq(0.5, 2, by = 0.1))  x <- small_metrics(D, prm,                    est = c(\"mle\", \"me\", \"same\"),                    obs = c(20, 50),                    sam = 1e2,                    seed = 1)  plot(x)   # ----------------------------------------------------- # Dirichlet Distribution Example # -----------------------------------------------------  D <- Dir(alpha = 1:2)  prm <- list(name = \"alpha\",             pos = 1,             val = seq(0.5, 2, by = 0.1))  x <- small_metrics(D, prm,                    est = c(\"mle\", \"me\", \"same\"),                    obs = c(20, 50),                    sam = 1e2,                    seed = 1)  plot(x)  # }"},{"path":"https://thechibo.github.io/joker/reference/stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistical Functions — stats","title":"Statistical Functions — stats","text":"set statistics extend ones made available stats package.","code":""},{"path":"https://thechibo.github.io/joker/reference/stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistical Functions — stats","text":"","code":"bvar(x)  bsd(x)  rowVar(x)  colVar(x)  # S4 method for class 'numeric' skew(x)  # S4 method for class 'numeric' kurt(x)"},{"path":"https://thechibo.github.io/joker/reference/stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistical Functions — stats","text":"x numeric bvar() bsd(), matrix rowVar() colVar().","code":""},{"path":"https://thechibo.github.io/joker/reference/stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statistical Functions — stats","text":"bvar() bsd() return single numeric, rowVar() colVar() return numeric vector.","code":""},{"path":"https://thechibo.github.io/joker/reference/stats.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Statistical Functions — stats","text":"bvar(): Biased sample variance bsd(): Biased sample standard deviation rowVar(): Biased sample variance matrix row colVar(): Biased sample variance matrix column skew(numeric): Sample skewness kurt(numeric): Sample kurtosis","code":""},{"path":"https://thechibo.github.io/joker/reference/stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistical Functions — stats","text":"","code":"if (FALSE) { # \\dontrun{ x <- r(Beta(2, 3), 20) y <- matrix(x, nrow = 2, ncol = 10)  bvar(x) bsd(x) rowVar(y) rowCol(y) } # }"},{"path":"https://thechibo.github.io/joker/reference/Stud.html","id":null,"dir":"Reference","previous_headings":"","what":"Student Distribution — Stud","title":"Student Distribution — Stud","text":"Student's t-distribution continuous probability distribution used primarily hypothesis testing constructing confidence intervals small sample sizes. defined one parameter: degrees freedom \\(\\nu > 0\\).","code":""},{"path":"https://thechibo.github.io/joker/reference/Stud.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Student Distribution — Stud","text":"","code":"Stud(df = 1)  # S4 method for class 'Stud,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Stud,numeric' p(distr, q, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Stud,numeric' qn(distr, p, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Stud,numeric' r(distr, n)  # S4 method for class 'Stud' mean(x)  # S4 method for class 'Stud' median(x)  # S4 method for class 'Stud' mode(x)  # S4 method for class 'Stud' var(x)  # S4 method for class 'Stud' sd(x)  # S4 method for class 'Stud' skew(x)  # S4 method for class 'Stud' kurt(x)  # S4 method for class 'Stud' entro(x)  llt(x, df)  # S4 method for class 'Stud,numeric' ll(distr, x)"},{"path":"https://thechibo.github.io/joker/reference/Stud.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Student Distribution — Stud","text":"df numeric. distribution degrees freedom parameter. distr object class Stud. x density function, x numeric vector quantiles. moments functions, x object class Stud. log-likelihood estimation functions, x sample observations. log, log.p logical. logarithm probability returned? q numeric. Vector quantiles. lower.tail logical. TRUE (default), probabilities \\(P(X \\leq x)\\), otherwise \\(P(X > x)\\). p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required.","code":""},{"path":"https://thechibo.github.io/joker/reference/Stud.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Student Distribution — Stud","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Stud.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Student Distribution — Stud","text":"probability density function (PDF) Student's t-distribution : $$ f(x; \\nu) = \\frac{\\Gamma\\left(\\frac{\\nu + 1}{2}\\right)}{\\sqrt{\\nu\\pi}\\ \\Gamma\\left(\\frac{\\nu}{2}\\right)}\\left(1 + \\frac{x^2}{\\nu}\\right)^{-\\frac{\\nu + 1}{2}} .$$","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Stud.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Student Distribution — Stud","text":"","code":"# ----------------------------------------------------- # Student Distribution Example # -----------------------------------------------------  # Create the distribution df <- 12 D <- Stud(df)  # ------------------ # dpqr Functions # ------------------  d(D, c(-3, 0, 3)) # density function #> [1] 0.01028313 0.39072631 0.01028313 p(D, c(-3, 0, 3)) # distribution function #> [1] 0.005533348 0.500000000 0.994466652 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] -0.2590327  0.8726093 x <- r(D, 100) # random generator function  # alternative way to use the function d1 <- d(D) ; d1(x) # d1 is a function itself #>   [1] 0.073179785 0.213366385 0.273822581 0.158779925 0.201403312 0.077688511 #>   [7] 0.348553507 0.196524538 0.109195424 0.237736256 0.346758652 0.332121040 #>  [13] 0.305045327 0.305785895 0.294381515 0.221349475 0.304215580 0.385167577 #>  [19] 0.390676766 0.271899025 0.216824582 0.228513034 0.135810426 0.155550204 #>  [25] 0.355941745 0.387143322 0.220158847 0.096673576 0.246811552 0.115420628 #>  [31] 0.369833128 0.374017741 0.106134830 0.247255798 0.355385296 0.008273681 #>  [37] 0.171724209 0.255791184 0.212983206 0.390334291 0.362071031 0.360626427 #>  [43] 0.097617118 0.383253525 0.389867731 0.366406489 0.385593710 0.389591488 #>  [49] 0.378686774 0.388750415 0.363196501 0.043547878 0.321735903 0.186193372 #>  [55] 0.388838797 0.238262456 0.285382750 0.357844810 0.308742381 0.342104760 #>  [61] 0.081994968 0.387031331 0.039723525 0.369303712 0.305111345 0.289699421 #>  [67] 0.193194692 0.272063528 0.094543450 0.366515072 0.219627148 0.368378820 #>  [73] 0.012591657 0.209287423 0.344485782 0.346727246 0.382439222 0.282420470 #>  [79] 0.316662449 0.353463531 0.387852946 0.250870806 0.341302341 0.388519159 #>  [85] 0.385451066 0.314989912 0.330173291 0.352113206 0.200181729 0.326651183 #>  [91] 0.268268462 0.027374649 0.037253969 0.221857172 0.388653113 0.345048923 #>  [97] 0.326911772 0.360828675 0.381173834 0.383556939  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 0 median(D) # Median #> [1] 0 mode(D) # Mode #> [1] 0 var(D) # Variance #> [1] 1.2 sd(D) # Standard Deviation #> [1] 1.095445 skew(D) # Skewness #> [1] 0 kurt(D) # Excess Kurtosis #> [1] 0.75 entro(D) # Entropy #> [1] 1.503907  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 0  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] -146.2144 llt(x, df) #> [1] -146.2144"},{"path":"https://thechibo.github.io/joker/reference/tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation and Variance Tests — tests","title":"Estimation and Variance Tests — tests","text":"set functions employs Monte Carlo simulations check consistency estimators (.e. estimators coded correctly) asymptotic normality (.e. asymptotic variance coded correctly).","code":""},{"path":"https://thechibo.github.io/joker/reference/tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation and Variance Tests — tests","text":"","code":"test_consistency(est, D0, n = 10000, seed = 1, ...)  test_avar(est, D0, n = 10000, m = 1000, seed = 1, bar = FALSE, ...)"},{"path":"https://thechibo.github.io/joker/reference/tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation and Variance Tests — tests","text":"est character. estimator tested. D0 object class Distribution. n integer. sample size simulated. seed integer. Passed set.seed(). ... extra arguments passed estimator. m integer. number samples simulated. bar logical. progress bar printed?","code":""},{"path":"https://thechibo.github.io/joker/reference/tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimation and Variance Tests — tests","text":"list simulation expected results can compared tests.","code":""},{"path":"https://thechibo.github.io/joker/reference/tests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation and Variance Tests — tests","text":"","code":"if (FALSE) { # \\dontrun{ D <- Beta(2, 3) test1 <- test_consistency(\"me\", D) test2 <- test_avar(\"mle\", D) } # }"},{"path":"https://thechibo.github.io/joker/reference/Unif.html","id":null,"dir":"Reference","previous_headings":"","what":"Uniform Distribution — Unif","title":"Uniform Distribution — Unif","text":"Uniform distribution absolute continuous probability distribution intervals length within distribution's support equally probable. defined two parameters: lower bound \\(\\) upper bound \\(b\\), \\(< b\\).","code":""},{"path":"https://thechibo.github.io/joker/reference/Unif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uniform Distribution — Unif","text":"","code":"Unif(min = 0, max = 1)  # S4 method for class 'Unif,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Unif,numeric' p(distr, q, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Unif,numeric' qn(distr, p, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Unif,numeric' r(distr, n)  # S4 method for class 'Unif' mean(x)  # S4 method for class 'Unif' median(x)  # S4 method for class 'Unif' mode(x)  # S4 method for class 'Unif' var(x)  # S4 method for class 'Unif' sd(x)  # S4 method for class 'Unif' skew(x)  # S4 method for class 'Unif' kurt(x)  # S4 method for class 'Unif' entro(x)  llunif(x, min, max)  # S4 method for class 'Unif,numeric' ll(distr, x)  eunif(x, type = \"mle\", ...)  # S4 method for class 'Unif,numeric' mle(distr, x, na.rm = FALSE)  # S4 method for class 'Unif,numeric' me(distr, x, na.rm = FALSE)"},{"path":"https://thechibo.github.io/joker/reference/Unif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uniform Distribution — Unif","text":"min, max numeric. distribution parameters. distr object class Unif. x density function, x numeric vector quantiles. moments functions, x object class Unif. log-likelihood estimation functions, x sample observations. log, log.p logical. logarithm probability returned? q numeric. Vector quantiles. lower.tail logical. TRUE (default), probabilities \\(P(X \\leq x)\\), otherwise \\(P(X > x)\\). p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required. type character, case ignored. estimator type (mle ). ... extra arguments. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Unif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uniform Distribution — Unif","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Unif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Uniform Distribution — Unif","text":"probability density function (PDF) Uniform distribution : $$ f(x; , b) = \\frac{1}{b - }, \\quad \\le x \\le b .$$","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Unif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uniform Distribution — Unif","text":"","code":"# ----------------------------------------------------- # Uniform Distribution Example # -----------------------------------------------------  # Create the distribution a <- 3 ; b <- 5 D <- Unif(a, b)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 0.8, 0.5)) # density function #> [1] 0 0 0 p(D, c(0.3, 0.8, 0.5)) # distribution function #> [1] 0 0 0 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 3.8 4.6 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 #>  [19] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 #>  [37] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 #>  [55] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 #>  [73] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 #>  [91] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 4 var(D) # Variance #> [1] 0.3333333 sd(D) # Standard Deviation #> [1] 0.5773503 skew(D) # Skewness #> [1] 0 kurt(D) # Excess Kurtosis #> [1] -1.2 entro(D) # Entropy #> [1] 0.6931472  # List of all available moments mom <- moments(D) #> Warning: The mode is any element in the support (or its interior) of #>             a Uniform distribution. The mean is returned by default. mom$mean # expectation #> [1] 4  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] -69.31472 llunif(x, a, b) #> [1] -69.31472  eunif(x, type = \"mle\") #> $min #> [1] 3.025647 #>  #> $max #> [1] 4.996425 #>  eunif(x, type = \"me\") #> $min #> [1] 2.9922 #>  #> $max #> [1] 5.056657 #>   mle(D, x) #> $min #> [1] 3.025647 #>  #> $max #> [1] 4.996425 #>  me(D, x) #> $min #> [1] 2.9922 #>  #> $max #> [1] 5.056657 #>  e(D, x, type = \"mle\") #> $min #> [1] 3.025647 #>  #> $max #> [1] 4.996425 #>   mle(\"unif\", x) # the distr argument can be a character #> $min #> [1] 3.025647 #>  #> $max #> [1] 4.996425 #>"},{"path":"https://thechibo.github.io/joker/reference/variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimator Variance — variance","title":"Estimator Variance — variance","text":"functions calculate variance (variance - covariance matrix multidimensional case) estimator, given specified family distributions true parameter values.","code":""},{"path":"https://thechibo.github.io/joker/reference/variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimator Variance — variance","text":"","code":"v(distr, type, ...)  avar_mle(distr, ...)  avar_me(distr, ...)  avar_same(distr, ...)"},{"path":"https://thechibo.github.io/joker/reference/variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimator Variance — variance","text":"distr Distribution object. type character, case ignored. estimator type. ... extra arguments.","code":""},{"path":"https://thechibo.github.io/joker/reference/variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimator Variance — variance","text":"numeric, matrix multidimensional cases.","code":""},{"path":"https://thechibo.github.io/joker/reference/variance.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Estimator Variance — variance","text":"avar_mle(): Asymptotic Variance Maximum Likelihood Estimator avar_me(): Asymptotic Variance Moment Estimator avar_same(): Asymptotic Variance Score-Adjusted Moment Estimator","code":""},{"path":"https://thechibo.github.io/joker/reference/variance.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimator Variance — variance","text":"General Textbooks Van der Vaart, . W. (2000), Asymptotic statistics, Vol. 3, Cambridge university press. Beta gamma distribution families Ye, Z.-S. & Chen, N. (2017), Closed-form estimators gamma distribution derived likelihood equations, American Statistician 71(2), 177–181. Tamae, H., Irie, K. & Kubokawa, T. (2020), score-adjusted approach closed-form estimators gamma beta distributions, Japanese Journal Statistics Data Science 3, 543–561. Mathal, . & Moschopoulos, P. (1992), form multivariate gamma distribution, Annals Institute Statistical Mathematics 44, 97–106. Oikonomidis, . & Trevezas, S. (2023), Moment-Type Estimators Dirichlet Multivariate Gamma Distributions, arXiv, https://arxiv.org/abs/2311.15025","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/variance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimator Variance — variance","text":"","code":"# ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  # Create the distribution a <- 3 b <- 5 D <- Beta(a, b)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 0.8, 0.5)) # density function #> [1] 2.268945 0.107520 1.640625 p(D, c(0.3, 0.8, 0.5)) # distribution function #> [1] 0.3529305 0.9953280 0.7734375 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 0.3205858 0.5167578 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 0.1572970 1.5454142 2.0058226 2.2364940 2.0614202 2.1071009 1.9605580 #>   [8] 1.3343136 2.1398770 1.1550699 1.9822881 0.6586582 2.1869828 1.4420598 #>  [15] 2.3017163 2.3040962 2.1806766 0.9455563 1.4183353 1.9398146 2.2636975 #>  [22] 1.9232714 2.2851302 0.4823720 2.0626798 2.3026696 1.2279035 2.2961755 #>  [29] 1.7424295 1.4684633 2.0100832 1.3561398 2.2767099 0.5034545 2.1057995 #>  [36] 0.9771713 2.2533341 2.2852951 2.1213302 1.2978172 0.4394535 2.2793570 #>  [43] 1.8188347 2.1850711 1.6914703 0.9198661 2.2081535 2.3022816 1.8806846 #>  [50] 2.2774036 1.9236509 2.3031542 2.2900962 1.9219677 1.9656488 2.2307432 #>  [57] 2.1820941 2.2862714 0.8893830 1.1295654 2.2332697 1.7413016 0.4762772 #>  [64] 1.9562541 2.3013799 0.6221162 2.1975494 2.2120136 1.1121248 1.3905348 #>  [71] 1.2410044 2.2918156 2.2047656 2.2198158 1.9455657 2.2797529 2.0476333 #>  [78] 0.2464753 1.9139067 1.8467172 1.7820504 2.1758954 2.1697057 1.9759306 #>  [85] 2.2949465 1.6566477 2.3045264 1.6579025 2.0792419 1.5421868 2.2477841 #>  [92] 2.2442318 2.2576685 1.3982576 0.9067358 2.1075033 2.0814838 2.2017677 #>  [99] 1.8851979 2.2146271  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 0.375 var(D) # Variance #> [1] 0.02604167 sd(D) # Standard Deviation #> [1] 0.1613743 skew(D) # Skewness #> [1] 0.3098387 kurt(D) # Excess Kurtosis #> [1] 0.04 entro(D) # Entropy #> [1] -0.4301508 finf(D) # Fisher Information Matrix #>            shape1      shape2 #> shape1  0.2617971 -0.13313701 #> shape2 -0.1331370  0.08818594  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 0.375  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] 50.2051 llbeta(x, a, b) #> [1] 50.2051  ebeta(x, type = \"mle\") #> $shape1 #> [1] 3.602139 #>  #> $shape2 #> [1] 6.077413 #>  ebeta(x, type = \"me\") #> $shape1 #> [1] 3.687881 #>  #> $shape2 #> [1] 6.209202 #>  ebeta(x, type = \"same\") #> $shape1 #> [1] 3.63299 #>  #> $shape2 #> [1] 6.116783 #>   mle(D, x) #> $shape1 #> [1] 3.602139 #>  #> $shape2 #> [1] 6.077413 #>  me(D, x) #> $shape1 #> [1] 3.687881 #>  #> $shape2 #> [1] 6.209202 #>  same(D, x) #> $shape1 #> [1] 3.63299 #>  #> $shape2 #> [1] 6.116783 #>  e(D, x, type = \"mle\") #> $shape1 #> [1] 3.602139 #>  #> $shape2 #> [1] 6.077413 #>   mle(\"beta\", x) # the distr argument can be a character #> $shape1 #> [1] 3.602139 #>  #> $shape2 #> [1] 6.077413 #>   # ------------------ # Estimator Variance # ------------------  vbeta(a, b, type = \"mle\") #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 vbeta(a, b, type = \"me\") #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 vbeta(a, b, type = \"same\") #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  avar_mle(D) #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 avar_me(D) #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 avar_same(D) #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  v(D, type = \"mle\") #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039"},{"path":"https://thechibo.github.io/joker/reference/Weib.html","id":null,"dir":"Reference","previous_headings":"","what":"Weibull Distribution — Weib","title":"Weibull Distribution — Weib","text":"Weibull distribution absolute continuous probability distribution, parameterized shape parameter \\(k > 0\\) scale parameter \\(\\lambda > 0\\).","code":""},{"path":"https://thechibo.github.io/joker/reference/Weib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weibull Distribution — Weib","text":"","code":"Weib(shape = 1, scale = 1)  # S4 method for class 'Weib,numeric' d(distr, x, log = FALSE)  # S4 method for class 'Weib,numeric' p(distr, q, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Weib,numeric' qn(distr, p, lower.tail = TRUE, log.p = FALSE)  # S4 method for class 'Weib,numeric' r(distr, n)  # S4 method for class 'Weib' mean(x)  # S4 method for class 'Weib' median(x)  # S4 method for class 'Weib' mode(x)  # S4 method for class 'Weib' var(x)  # S4 method for class 'Weib' sd(x)  # S4 method for class 'Weib' skew(x)  # S4 method for class 'Weib' kurt(x)  # S4 method for class 'Weib' entro(x)  llweibull(x, shape, scale)  # S4 method for class 'Weib,numeric' ll(distr, x)  eweibull(x, type = \"mle\", ...)  # S4 method for class 'Weib,numeric' mle(   distr,   x,   par0 = \"lme\",   method = \"L-BFGS-B\",   lower = 1e-05,   upper = Inf,   na.rm = FALSE )  # S4 method for class 'Weib,numeric' me(distr, x, par0 = \"lme\", lower = 0.5, upper = Inf, na.rm = FALSE)"},{"path":"https://thechibo.github.io/joker/reference/Weib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weibull Distribution — Weib","text":"shape, scale numeric. non-negative distribution parameters. distr object class Weib. x density function, x numeric vector quantiles. moments functions, x object class Weib. log-likelihood estimation functions, x sample observations. log, log.p logical. logarithm probability returned? q numeric. Vector quantiles. lower.tail logical. TRUE (default), probabilities \\(P(X \\leq x)\\), otherwise \\(P(X > x)\\). p numeric. Vector probabilities. n number observations. length(n) > 1, length taken number required. type character, case ignored. estimator type (mle, lme). ... extra arguments. par0, method, lower, upper arguments passed optim mle optimization. See Details. na.rm logical. NA values removed?","code":""},{"path":"https://thechibo.github.io/joker/reference/Weib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weibull Distribution — Weib","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list, estimators unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https://thechibo.github.io/joker/reference/Weib.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weibull Distribution — Weib","text":"probability density function (PDF) Weibull distribution : $$ f(x; k, \\lambda) = \\frac{k}{\\lambda}\\left(\\frac{x}{\\lambda} \\right)^{k - 1} \\exp\\left[-\\left(\\frac{x}{\\lambda}\\right)^k\\right], \\quad x \\geq 0 .$$ parameter estimation, MLE explicitly derived. However, L-moment estimator (type = \"lme\") available, used initialization numerical approximation MLE . MLE Weibull distribution parameters available closed form approximated numerically. optimization can performed shape parameter \\(k\\(0,+\\infty)\\). MLE, done optim(). default method used L-BFGS-B method lower bound 1e-5 upper bound Inf. par0 argument can either numeric (satisfying lower <= par0 <= upper) character specifying closed-form estimator used initialization algorithm (\"lme\" - default value). , done uniroot(). , par0 argument can either numeric (satisfying lower <= par0 <= upper) character specifying closed-form estimator used initialization algorithm (\"mle\" \"lme\" - default value). lower upper bounds set default 0.5 Inf, respectively. Note equations involve \\(\\Gamma(1 + 1 \\ k)\\), can become unreliable small values k, hence 0.5 lower bound. Specifying lower bound 0.5 result warning ignored.","code":""},{"path":"https://thechibo.github.io/joker/reference/Weib.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Weibull Distribution — Weib","text":"Kim, H. M., Jang, Y. H., Arnold, B. C., & Zhao, J. (2024). New efficient estimators Weibull distribution. Communications Statistics-Theory Methods, 53(13), 4576-4601.","code":""},{"path":[]},{"path":"https://thechibo.github.io/joker/reference/Weib.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weibull Distribution — Weib","text":"","code":"# ----------------------------------------------------- # Weibull Distribution Example # -----------------------------------------------------  # Create the distribution a <- 3 ; b <- 5 D <- Weib(a, b)  # ------------------ # dpqr Functions # ------------------  d(D, c(0.3, 2, 10)) # density function #> [1] 0.0021595335 0.0900484800 0.0008051103 p(D, c(0.3, 2, 10)) # distribution function #> [1] 0.0002159767 0.0619950005 0.9996645374 qn(D, c(0.4, 0.8)) # inverse distribution function #> [1] 3.996939 5.859512 x <- r(D, 100) # random generator function  # alternative way to use the function df <- d(D) ; df(x) # df is a function itself #>   [1] 0.213216484 0.189095707 0.223099907 0.171570313 0.183506911 0.235044754 #>   [7] 0.230584643 0.176772122 0.230333687 0.207085245 0.167936595 0.198665143 #>  [13] 0.161516267 0.227530990 0.214915556 0.207129065 0.124968588 0.203969106 #>  [19] 0.200518032 0.056385202 0.209026726 0.218628586 0.228204805 0.233139174 #>  [25] 0.144983652 0.213969519 0.133126941 0.145349466 0.233569584 0.176998852 #>  [31] 0.233913242 0.233568640 0.011617491 0.183448743 0.141567297 0.191559224 #>  [37] 0.222189145 0.233343469 0.186499957 0.117952698 0.141628034 0.133815768 #>  [43] 0.156439565 0.219399362 0.234203286 0.209956745 0.190507331 0.165846503 #>  [49] 0.205451427 0.118625567 0.183711919 0.160501655 0.233070706 0.165627489 #>  [55] 0.048790685 0.226325065 0.076753493 0.190647485 0.045573016 0.231022590 #>  [61] 0.201478393 0.035674815 0.232670668 0.229377728 0.210088231 0.192001303 #>  [67] 0.234201175 0.217805481 0.235080104 0.002620994 0.234898813 0.185030856 #>  [73] 0.146714918 0.154330941 0.159883015 0.218050643 0.072927834 0.234298139 #>  [79] 0.234894547 0.089766721 0.146003765 0.219905987 0.231509449 0.160623031 #>  [85] 0.149186864 0.235034641 0.218020589 0.147624730 0.119072433 0.234959975 #>  [91] 0.170872230 0.170564649 0.122234950 0.217872452 0.101972743 0.094784734 #>  [97] 0.057743329 0.211975329 0.207145840 0.232091664  # ------------------ # Moments # ------------------  mean(D) # Expectation #> [1] 4.464898 median(D) # Median #> [1] 4.424985 mode(D) # Mode #> [1] 4.367902 var(D) # Variance #> [1] 2.633322 sd(D) # Standard Deviation #> [1] 1.622751 skew(D) # Skewness #> [1] 0.1681028 kurt(D) # Excess Kurtosis #> [1] -0.2705364 entro(D) # Entropy #> [1] 4.844159  # List of all available moments mom <- moments(D) mom$mean # expectation #> [1] 4.464898  # ------------------ # Point Estimation # ------------------  ll(D, x) #> [1] -183.4598 llweibull(x, a, b) #> [1] -183.4598  eweibull(x, type = \"mle\") #> $shape #> [1] 3.231992 #>  #> $scale #> [1] 5.006414 #>  eweibull(x, type = \"me\") #> $shape #> [1] 3.193606 #>  #> $scale #> [1] 4.972298 #>  eweibull(x, type = \"lme\") #> $shape #> [1] 3.231992 #>  #> $scale #> [1] 4.969405 #>   mle(D, x) #> $shape #> [1] 3.231992 #>  #> $scale #> [1] 5.006414 #>  me(D, x) #> $shape #> [1] 3.193606 #>  #> $scale #> [1] 4.972298 #>  e(D, x, type = \"mle\") #> $shape #> [1] 3.231992 #>  #> $scale #> [1] 5.006414 #>   mle(\"weib\", x) # the distr argument can be a character #> $shape #> [1] 3.231992 #>  #> $scale #> [1] 5.006414 #>"},{"path":"https://thechibo.github.io/joker/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with estimators","title":"Getting help with estimators","text":"Thanks using estimators! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://thechibo.github.io/joker/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with estimators","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://thechibo.github.io/joker/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with estimators","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://thechibo.github.io/joker/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with estimators","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://thechibo.github.io/joker/news/index.html","id":"joker-0135","dir":"Changelog","previous_headings":"","what":"joker 0.13.5","title":"joker 0.13.5","text":"Created custom progress bar remove progress package import.","code":""},{"path":"https://thechibo.github.io/joker/news/index.html","id":"joker-0134","dir":"Changelog","previous_headings":"","what":"joker 0.13.4","title":"joker 0.13.4","text":"Fix documentation bug Multigam caused checks fail. Set CircleCI.","code":""},{"path":"https://thechibo.github.io/joker/news/index.html","id":"joker-0133","dir":"Changelog","previous_headings":"","what":"joker 0.13.3","title":"joker 0.13.3","text":"Removed docs/ .gitignore allow pkgdown site.","code":""},{"path":"https://thechibo.github.io/joker/news/index.html","id":"joker-0132","dir":"Changelog","previous_headings":"","what":"joker 0.13.2","title":"joker 0.13.2","text":"Fixed bug Dir mle(). Fixed bug Laplace test. Removed sweave vignette.","code":""},{"path":"https://thechibo.github.io/joker/news/index.html","id":"joker-0131","dir":"Changelog","previous_headings":"","what":"joker 0.13.1","title":"joker 0.13.1","text":"Changed vignette Rnw format Rmd. Added pkgdown. Fixed bug README (double covr sticker). Added tests improved covr. Changed package title. Fixed wrong URL description","code":""},{"path":"https://thechibo.github.io/joker/news/index.html","id":"joker-0130","dir":"Changelog","previous_headings":"","what":"joker 0.13.0","title":"joker 0.13.0","text":"Added log, log.p, lower.tail arguments dpqr functions. Changed arguments much stats package syntax. Added Weibull distribution. Complied goodpractice::gp() extended codecov accordingly. Changed e<name>() can accept custom methods. Changed avar() v().","code":""},{"path":"https://thechibo.github.io/joker/news/index.html","id":"joker-0121","dir":"Changelog","previous_headings":"","what":"joker 0.12.1","title":"joker 0.12.1","text":"Updated readme github actions.","code":""},{"path":"https://thechibo.github.io/joker/news/index.html","id":"joker-0120","dir":"Changelog","previous_headings":"","what":"joker 0.12.0","title":"joker 0.12.0","text":"Changed package named joker since estim archived R package search results got confused.","code":""}]
